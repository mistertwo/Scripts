#!/bin/bash -x
#Author: BMO and JM
#Version: 1.1.0
# 1.1.0 -- Begin work on cleaning up this script,
# 1.0.8 -- Reworked the acct and pod variables to be compatible with RAX Clusters - BMO 6/4
# 1.0.7 -- Added a simple Help function - BMO 4/15
# 1.0.7 -- Cleaned up the inner workings of the script - BMO 4/15
# 1.0.6 -- Added the Stage-Backup function -BMO 4/14
# 1.0.6 -- Added the Update function - BMO 4/14
# 1.0.6 -- Added the ability to set the Uname at any time - BMO 4/14

#################### To-Do ####################
# Rework the Mig-All function
# Standardize the Date variables

#################### Install ####################
### For Macs ###
#sudo curl https://raw.githubusercontent.com/bmo-tv/Scripts/master/l2 -o /usr/sbin/l2 && sudo chown root:wheel /usr/sbin/l2 && sudo chmod +x /usr/sbin/l2 && l2 setuname
#
### For Linux ###
#sudo curl https://raw.githubusercontent.com/bmo-tv/Scripts/master/l2 -o /usr/sbin/l2 && sudo chown root:root /usr/sbin/l2 && sudo chmod +x /usr/sbin/l2 && l2 setuname
#


#################### FUNCTIONS ####################
#---------------------------------------------------------------------------------------------#
## www-codes => Description: Grab occurrences of a certain HTTP code in an account's logs.
#Usage l2 www-codes <account> -c <Code #>
www-codes (){ local OPTIND
while getopts ":c:" opt; do
	case $opt in
		c)
			err=$OPTARG;;
	esac
done
if [[ -z ${err} ]]; then
	read -p "What HTTP Code would you like to search for? " err
fi
array=( 200 301 302 304 306 400 403 404 408 444 499 500 501 502 503 504 507 )
for i in ${array[*]}; do
	if [[ ${i} = ${err} ]]; then
		ssh -tq ${uname}@${acct_ip} "sudo cat /var/log/nginx/${acct}.access.log > /home/${uname}/${acct}.${epoch}.nginx && sudo cat /var/log/apache2/${acct}.access.log > /home/${uname}/${acct}.${epoch}.apache && exit ; bash"
		scp -rq ${uname}@${acct_ip}:/home/${uname}/${acct}.${epoch}.nginx ${acct}.${epoch}.nginx && scp -rq ${uname}@${acct_ip}:/home/${uname}/${acct}.${epoch}.apache ${acct}.${epoch}.apache
		echo -e "\nDescription: Displays requests that had highest occurrences of the ${err} HTTP Status in ${acct}'s logs. Request counts are to the left of the requests below."
		for nglog in ${acct}.${epoch}.nginx
			do echo -e ${br}${nglog}"\n"
				awk -F"\|" -v code=${err} '{if ($5 ~ code) printf "IP: %s Code: %s Referrer: %s Request: %s\n",$3,$5,$7,$10}' ${nglog}| sort| uniq -c| sort -nk1| tail
			done
		for apachelog in ${acct}.${epoch}.apache
			do echo -e ${br}${apachelog}"\n"
				awk -v code=${err} '{if ($9 ~ code) printf "IP: %s Code: %s Referrer: %s Request: %s %s %s\n",$1,$9,$11,$6,$7,$8}' ${apachelog}| sort| uniq -c| sort -nk1| tail
			done
		echo -e ${br}
		ssh -tq ${uname}@${acct_ip} "rm ${acct}.${epoch}.nginx ${acct}.${epoch}.apache && exit ; bash" && rm ${acct}.${epoch}.nginx ${acct}.${epoch}.apache
		read -p "Would you like to try another code? ( X to exit ) " ans
		if [[ ${ans} = [xX] ]]; then
			echo && exit 0
		else
			err=${ans}
			www-codes
		fi
	fi
done
	echo && read -p "Code \"${err}\" Not Found :( Would you like to try again? ( X to exit ) " err
	if [[ ${err} != [xX] ]]; then
		www-codes
	else
		echo && exit 0
	fi
}
#---------------------------------------------------------------------------------------------#
#### NEED TO REWORK ####
### mig-all => Description: Output lines to migrate every account associated with another account, including parent and children.
###Usage l2 mig-all <account> <Destination Pod>
mig-all (){ local OPTIND
while getopts ":p:" opt; do
	case $opt in
		p)
			destpod=$OPTARG;;
	esac
done

if [[ -z ${destpod} ]]; then
	read -p "What Pod are you moving to? " destpod
fi
ssh -tq ${uname}@${acct_ip} "sudo /nas/wp/ec2/cluster parent-child ${acct} > /home/${uname}/result.${epoch}.txt && hostname | cut -d- -f2 > /home/${uname}/host.${epoch}.txt && exit ; bash"
scp -q ${uname}@${acct_ip}:/home/${uname}/result.${epoch}.txt result.${epoch}.txt && scp -q ${uname}@${acct_ip}:/home/${uname}/host.${epoch}.txt host.${epoch}.txt
curpod=$(cat host.${epoch}.txt)
	echo -e "\nDescription: Output lines to migrate every account associated with another account, including parent and children."
	echo -e ${br}
	echo -e $(cat result.${epoch}.txt | sed 's/ /\\n/g') | 
while read
	do echo -e "sudo /nas/wp/ec2/cluster move-to-preferred-cluster ${curpod} ${REPLY} ${destpod}"
done
	echo -e "\n${br}"
ssh -tq ${uname}@${acct_ip} "rm result.${epoch}.txt host.${epoch}.txt && exit ; bash" && rm result.${epoch}.txt host.${epoch}.txt
}
#---------------------------------------------------------------------------------------------#
#### NEED TO SET IN YSLOW GROUP ####
### ng-logs => Description: Show log hits from nginx that took the longest time to complete.
### Usage L2 ng-logs <account>
ng-logs (){
ssh -tq ${uname}@${acct_ip} "echo; sudo -v
	echo -e \"\\\nDescription: Nginx log entries below are sorted by Page Load Time (8th | delimited column).\"
	echo -e \"\\\n${sshbr}Slow requests that did NOT receive a 200 OK HTTP Status Code.\\\n\"
		sudo cat /var/log/nginx/${acct}.access.log | awk '!/\|200\|/'| sort -t\| -rnk8| head
	echo -e \"\\\n${sshbr}Slow requests that received 200 OK HTTP Status Code.\\\n\"
		sudo cat /var/log/nginx/${acct}.access.log | awk '/\|200\|/' | sort -t\| -rnk8| head
	echo -e \"${sshbr}\"
exit"
read -p "Check for slow SQL information? Y or N - " ans
if [[ ${ans} = [yY]* ]]; then
	sql-slow
fi
}
#---------------------------------------------------------------------------------------------#
#### NEED TO SET IN YSLOW GROUP ####
### sql-slow => Description: Show problematic sql information.(DO NOT PASTE THIS COMPLETE OUTPUT TO A CUSTOMER)
###usage l2 sql-slow <account>
sql-slow (){
echo -e "\nDescription: Display problematic MySQL information. (DO NOT PASTE THIS COMPLETE OUTPUT TO A CUSTOMER)\n"
ssh -tq ${uname}@${acct_ip} "echo; sudo -v
	echo -e \"\\n\"${sshbr}\"Show MySQL users that hit the slow query log the most.\\n\"
		sudo awk '/User@Host/ {print \$3}' /var/log/mysql/mysql-slow.log| cut -d\[ -f1| sort| uniq -c| sort -nk1| tail -10
	echo -e ${sshbr}\"Count of which PHP lines that created slow queries: \\n\"
		sudo grep -oP '(?<=\[\/nas\/wp\/www\/cluster\-).*(?=\])' /var/log/mysql/mysql-slow.log| sort| uniq -c| sort -nk1| tail -10
	echo -e \"\\\n\033[1;31m(This could take some time)\033[1;00m\\\n${sshbr}Heavy SQL Tables based on table size vs. table rows: \\n\"
		sudo mysql -e \"select concat(table_schema, '.', table_name), concat(round(table_rows / 1000000, 2), 'M') rows, concat(round(data_length / ( 1024 * 1024 * 1024 ), 2), 'G') DATA, concat(round(index_length / ( 1024 * 1024 * 1024 ), 2), 'G') idx, concat(round(( data_length + index_length ) / ( 1024 * 1024 * 1024 ), 2), 'G') total_size, round(index_length / data_length, 2) idxfrac from information_schema.TABLES ORDER by data_length + index_length DESC limit 10;\"
	echo -e ${sshbr}
exit"
if [[ ${acct} != pod-[0-9]* ]] || [[ ${acct} != sftp[0-9]* ]]; then
	sql-heavy-rows
fi
}
#---------------------------------------------------------------------------------------------#
#### NEED TO SET IN YSLOW GROUP ####
### sql-heavy-rows => Description: Show which tables have over 5000 rows for an account.
###Usage l2 sql-heavey-rows <account>
sql-heavy-rows (){
ssh -tq ${uname}@${acct_ip} "echo; sudo -v
	echo -e \"\\nTables which have over 5000 rows.\\n${sshbr}Account: ${acct}\nDatabase: wp_${acct}\\n${sshbr}\"
		cd /nas/wp/www/sites/${acct} && mysql -u ${acct} -p\$(cat wp-config.php | grep \"define( 'DB_PASSWORD\" |  awk -F\"'\" '{print \$4}') wp_${acct} -e 'show table status where rows > 5000;'| awk '{print \$1,\$5 }'| sort -nk2| column -t
exit"
	echo -e ${br}
}
#---------------------------------------------------------------------------------------------#

## hiload => Description: Show load that was 1.5x the number of processer cores.
# Usage l2 hiload <account> -d <DD>
hiload (){ local OPTIND
while getopts ":d:" opt; do
	case $opt in
		d)
			day=$OPTARG;;
	esac
done
if [[ -z ${day} ]]; then
	day=$(date +%d)
fi
ssh -tq ${uname}@${acct_ip} "echo; sudo -v
	echo -e \"\\\n${sshbr}Description: Show UTC times when load was over 1.5x the number of processor cores for this server.\"
		if [[ ! -f /var/log/sysstat/sa${day} ]]
			then echo -e \"\\\nInfo for ${day} does not exist, please try again.\"
		else sudo sar -q -f /var/log/sysstat/sa${day}| awk -vcpu=\$(grep ^processor /proc/cpuinfo| wc -l) '{if (\$5 > (1.5 * cpu)) print}'
		fi
exit"
	echo -e "\n${br}"
if [[ ${day} = `date +%d` ]]; then
	read -p "Run \"slog\" for a certain time? HH:MM or X - " a
		echo
			if [[ ${a} = [0-9][0-9]:[0-9][0-9] ]]; then
				time=${a}
				slog
			fi
else
	exit 0
fi
}
#---------------------------------------------------------------------------------------------#

## wp-plugins => Description: Show enabled plugins for an account.
#Usage l2 wp-plugins <account>
wp-plugins (){
ssh -tq ${uname}@${acct_ip} "echo; sudo -v
	pf=\$(sudo grep \"table_prefix\" /nas/wp/www/sites/${acct}/wp-config.php | awk 'tolower(\$0) ~ /^\\\$table_prefix/ {gsub(/\"|;|'\"'\"'/,\"\"); print \$3}')
	db=wp_${acct}
		echo -e \"\\\n\"${sshbr}\"Enabled plugins for account \"${acct}\": \\\n\"
			sudo mysql \${db} -e \"select * from \${pf}options where option_name='active_plugins';\"| tr '\"' '\n'| awk -F\/ '/^[a-zA-Z]/ {print \$1}'| sed 1d
exit"
	echo -e ${br}
}
#---------------------------------------------------------------------------------------------#
#### NEED TO ADD TO YSLOW GROUP ####
#### NEED TO REWORK ####
### uptime => Description: Shows how many min/hr had log hits. Ideally 60 for busy site meaning at least one hit per minute happened, and, thus, no downtime.
###Usage l2 uptime <account> <two-digit-day> <three-digit-month> (IE: l2 uptime bmoore 12 dec)
uptime (){
if [[ -z ${three} ]]; then 
	read -p "Which Day (must be in 2 digit format)? " day
	read -p "Which Month (must be in 3 character format, ie. 'Jan')? " mon
elif [[ ${three} != [0-9][0-9] ]]; then
		echo -e "\nLooks like you got it wrong!\nUsage - l2 uptime <account> <two-digit-day> <three-digit-month> (IE: l2 uptime ${acct} 12 dec)\nlets try again.\n"
			read -p "Which Day (must be in 2 digit format)? " day
    		read -p "Which Month (must be in 3 character format, ie. 'Jan')? " mon
else
day=${three}
mon=${four}
fi
log="/var/log/apache2/${acct}.access.log"
ssh -tq ${uname}@${acct_ip} "sudo zgrep -Ei ${day}\"/\"${mon} ${log} | awk '{gsub(/\[|/,\"\"); print \$4}'| sed 's/:[0-9][0-9]$//g'| sort| uniq| sed 's/:[0-9][0-9]$//g'| uniq -c > /home/${uname}/${acct}.${epoch}.access.log
 	 sudo zgrep -Ei ${day}\"/\"${mon} ${log}.1 | awk '{gsub(/\[|/,\"\"); print \$4}'| sed 's/:[0-9][0-9]$//g'| sort| uniq| sed 's/:[0-9][0-9]$//g'| uniq -c >> /home/${uname}/${acct}.${epoch}.access.log
  	 sudo zgrep -Ei ${day}\"/\"${mon} ${log}.2.gz | awk '{gsub(/\[|/,\"\"); print \$4}'| sed 's/:[0-9][0-9]$//g'| sort| uniq| sed 's/:[0-9][0-9]$//g'| uniq -c >> /home/${uname}/${acct}.${epoch}.access.log
   	 sudo zgrep -Ei ${day}\"/\"${mon} ${log}.3.gz | awk '{gsub(/\[|/,\"\"); print \$4}'| sed 's/:[0-9][0-9]$//g'| sort| uniq| sed 's/:[0-9][0-9]$//g'| uniq -c >> /home/${uname}/${acct}.${epoch}.access.log
     sudo zgrep -Ei ${day}\"/\"${mon} ${log}.4.gz | awk '{gsub(/\[|/,\"\"); print \$4}'| sed 's/:[0-9][0-9]$//g'| sort| uniq| sed 's/:[0-9][0-9]$//g'| uniq -c >> /home/${uname}/${acct}.${epoch}.access.log
     sudo zgrep -Ei ${day}\"/\"${mon} ${log}.5.gz | awk '{gsub(/\[|/,\"\"); print \$4}'| sed 's/:[0-9][0-9]$//g'| sort| uniq| sed 's/:[0-9][0-9]$//g'| uniq -c >> /home/${uname}/${acct}.${epoch}.access.log
     exit ; bash"
scp -q ${uname}@${acct_ip}:/home/${uname}/${acct}.${epoch}.access.log ${acct}.${epoch}.access.log
	echo -e "\nCurrent date is "$(date)"\n${br}"
		cat ${acct}.${epoch}.access.log | while read line; do awk -v account=${acct} '{printf "Log hits on %s/60 possible minutes during the %s:00-59 time period for "account".\n",$1,$2}'
	echo -e ${br}
done
ssh -tq ${uname}@${acct_ip} "rm ${acct}.${epoch}.access.log && exit ; bash" && rm ${acct}.${epoch}.access.log
}
#---------------------------------------------------------------------------------------------#

## nginx-conf =>  Description: Open the accounts NGINX Config file with preferred program (less by default).
#Usage: l2 nginx-conf <account> -p <program>
nginx-conf (){ local OPTIND
while getopts ":p:" opt; do
	case $opt in
		p)
			prog=$OPTARG;;
	esac
done
if [[ -z ${prog} ]]; then
	prog='less'
fi
ssh -tq ${uname}@${acct_ip} "if [[ ! -f /nas/wp/conf/lb/sites/${acct}.conf ]]
	then echo -e \"\\\nNo File, maybe you typed the account wrong?\"
		exit
    else
    	${prog} /nas/wp/conf/lb/sites/${acct}.conf
    exit
	fi"
}
#---------------------------------------------------------------------------------------------#

## login: Login to an Account via SSH (Account required, location optional, Production Environment Default)
# Usage l2 login <account> -l <location> -p or -s
login (){
	local OPTIND
while getopts ":l:ps" opt; do
	case $opt in
		l)
			loc=$OPTARG;;
		p)
			envir='sites';;
		s)
			envir='staging';;
	esac
done
if [[ -z ${envir} ]]; then
	envir='sites'
fi
if [[ -n ${pod} ]]; then
	if [[ -n ${loc} ]]; then
		echo -e ${br}"Alright, Logging into ${pod} and going to ${loc}.\n"
			ssh -tq ${uname}@${acct_ip} "cd ${loc}; bash"
	else
		echo -e ${br}"Alright, logging into ${pod}.\n"
			ssh -tq ${uname}@${acct_ip}
	fi
else
	if [[ -n ${loc} ]]; then
		echo -e ${br}"Alright, Logging into the ${envir} and going to ${loc}\n"
			ssh -tq ${uname}@${acct_ip} " if [[ -d /nas/wp/www/${envir}/${acct} ]]
				then cd /nas/wp/www/${envir}/${acct} && cd ${loc}
			else
				echo -e \"The Account, \033[1;31m"${acct}"\033[1;000m, no longer has a Site Directory, exiting.\"
					exit
			fi; bash"
	else
		echo -e ${br}"Alright, logging into the ${envir} Server\n"
			ssh -tq ${uname}@${acct_ip} "
				if [[ -d /nas/wp/www/${envir}/${acct} ]]
					then cd /nas/wp/www/${envir}/${acct}
				else
					echo -e \"The Account, \033[1;31m"${acct}"\033[1;000m, no longer has a Site Directory, exiting.\"
					exit
		    	fi; bash"
	fi
fi
	echo
}
#---------------------------------------------------------------------------------------------#

## find => Description: Find either a File or a String of Text in the account.
# Usage: l2 find <account> -p -s -f <file> -t <text>
find (){ local OPTIND
	#Declare Opts
	while getopts ":psf:t:" opt; do
		case $opt in
			f)
				file=$OPTARG;;
			p)
				envir='sites';;
			s)
				envir='staging';;
			t)
				text=$OPTARG;;
		esac
	done
	# Check if we have everything we need
	if [[ -z ${file} ]] && [[ -z ${text} ]]; then
		echo -e ${br}
		read -p "What are you looking for? " search
		read -p "Is this a File or a String that you are looking for? " which
		echo
			# Set what we are looking for
			if [[ ${which} = f* ]]; then
				file=${search}
			else
				text=${search}
			fi
	fi
	# Make sure we know which environment we are looking through
	if [[ -z ${envir} ]]; then
		envir='sites'
	fi
	# Lets get some results
	echo -e "\n"${br}
	if [[ -n ${file} ]] && [[ -n ${text} ]]; then 
		ssh -tq ${uname}@${acct_ip} "
			sudo grep -i -e \"${text}\" /nas/wp/www/${envir}/${acct}/${file} > /home/${uname}/find.${epoch}
			nl find.${epoch}
			echo -e ${sshbr}
			read -p \"Which File would you like to Open? Pick a number or X to exit. \" num
			while [[ \$num = [0-9]* ]]; do
				line=\$(awk -F\":\" '{print \$1}' find.${epoch} | sed -n \"\$num\"p)
					sudo nano +\${line} /nas/wp/www/${envir}/${acct}/${file}
				nl find.${epoch}
				echo -e ${sshbr}
				read -p \"Would you like to open another? X to finish \" num
			done
			exit"
	elif [[ -n ${text} ]] && [[ -z ${file} ]]; then
		ssh -tq ${uname}@${acct_ip} "
			cd /nas/wp/www/${envir}/${acct}/
			grep -irn --exclude=*.{sql,png,pdf,csv,jpeg,jpg,gif,zip,tar,tar.gz} --exclude-dir=wp-includes --exclude-dir=wp-admin -e \"${text}\" * > /home/${uname}/find.${epoch}
			cd
			nl find.${epoch}
			echo -e ${sshbr}
			read -p \"Which File would you like to Open? Pick a number or X to exit. \" num
			while [[ \$num = [0-9]* ]]; do
				file=\$(awk -F\":\" '{print \$1}' find.${epoch} | sed -n \"\$num\"p)
				line=\$(awk -F\":\" '{print \$2}' find.${epoch} | sed -n \"\$num\"p)
					sudo nano +\${line} /nas/wp/www/${envir}/${acct}/\${file}
				nl find.${epoch}
				echo -e ${sshbr}
				read -p \"Would you like to open another? X to finish \" num
			done
			exit"
	elif [[ -n ${file} ]] && [[ -z ${text} ]]; then
		ssh -tq ${uname}@${acct_ip} "
			cd /nas/wp/www/${envir}/${acct}/
			sudo find . -type f -iname \"*${file}*\" ! -path \".git/*\" ! -path \"./wp-admin/*\" ! -path \"./wp-includes/*\" > /home/${uname}/find.${epoch}
			nl /home/${uname}/find.${epoch}
			echo -e ${sshbr}
			read -p \"Which File would you like to Open? Pick a number or X to exit. \" num
			while [[ \$num = [0-9]* ]]; do
				file=\$(sed -n \"\$num\"p /home/${uname}/find.${epoch})
				sudo nano \${file}
			echo -e \"\n${sshbr}\"
				nl /home/${uname}/find.${epoch}
			echo -e ${sshbr}
				read -p \"Would you like to open another? X to finish \" num
			done
			exit"
	fi
	echo & ssh -tq ${uname}@${acct_ip} "rm -f find.${epoch} ack.${epoch}; exit"
}
#---------------------------------------------------------------------------------------------#

## duplicity => Description: Get the files for a Site or Specific Folder from our Duplicity Backup (full backup)
# Usage: l2 duplicity <account> -d <date> -f <folder/file>
duplicity (){ local OPTIND
	#Declare Opts
	while getopts ":d:f:" opt; do
		case $opt in
			d)
				date=$OPTARG;;
			f)
				folder=$OPTARG;;
		esac
	done
	# Handles the Date Entry
	if [[ -z ${date} ]]; then
		# Get the Date to restore from
		read -p "From what date? YYYYMMDD " date
		echo
    fi
    # Ensure uniform date input
	san_date ${date}
    # Optionally, get a specific folder
    if [[ -z ${folder} ]]; then
    	read -p "Which Folder or File? (Press enter for the whole site) " folder
		echo -e "\n"${br}
	fi
	# Do the things
	if [[ -n ${folder} ]]; then
		ssh -tq ${uname}@${acct_ip} "cd /var/tmp && sudo duplicity_restore_v2 -s ${acct} -d ${date} -r ${folder}
			sudo mv -f ${acct} /home/${uname}/
			exit"
	else
		ssh -tq ${uname}@${acct_ip} "cd /var/tmp && sudo duplicity_restore_v2 -s ${acct} -d ${date} -r /
			sudo mv -f ${acct} /home/${uname}/
			exit"
	fi
	# You did it! Now what would you like to do?
	clean=n
	while [[ ${clean} = [nN]* ]]; do
	echo -e "\n"${br}
	read -p "Would you like to Download or Move the results? (press Enter to drop into Shell) " option
	echo -e ${br}
		if [[ ${option} = [dD]* ]]; then
			ssh -tq ${uname}@${acct_ip} "tar -cvf ${acct}-duplicity.${epoch}.tar ${acct}; exit"
			scp ${uname}@${acct_ip}:${acct}-duplicity.${epoch}.tar ${acct}-duplicity.${epoch}.tar 
		elif [[ ${option} = [mM]* ]]; then
			read -p "Tar it or as is? " method
				if [[ ${method} = [tT]* ]]; then
					ssh -tq ${uname}@${acct_ip} "tar -cvf ${acct}-duplicity.${epoch}.tar ${acct}
						sudo mv ${acct}-duplicity.${epoch}.tar /nas/wp/www/sites/${acct}/_wpeprivate/
						exit"
				else
					ssh -tq ${uname}@${acct_ip} "sudo mkdir /nas/wp/www/sites/${acct}/_wpeprivate/${epoch}-${acct}
						sudo mv -f ${acct}/* /nas/wp/www/sites/${acct}/_wpeprivate/${epoch}-${acct}/.
						exit"
				fi
		elif [[ -z ${option} ]]; then
			echo -e "\nAlright, dropping you in the folder, have fun.\n"
			ssh -tq ${uname}@${acct_ip} "cd ${acct}; bash"
		fi
	echo -e ${br}
	read -p "All Done? Clean up? Yes or No " clean
	echo
	done
	sleep .5
	ssh -tq ${uname}@${acct_ip} "sudo rm -rf ${acct} && if [[ -f ${acct}-duplicity.${epoch}.tar ]]; then rm -f ${acct}-duplicity.${epoch}.tar; fi && exit; bash"
}
#---------------------------------------------------------------------------------------------#
#### NEED TO ADD TO YSLOW GROUP ####
### slog => Description: Count which Apache log had the most hits in a time range.
### Usage: l2 slog <account> <HH:MM> <DD/MONTH>
### Example l2 slog wpengine 14:25 02/Mar
slog (){
if [[ -z ${three} ]]; then
	read -p "What Time (UTC) would you like to Check? HH:MM - " three
		echo
	read -p "What Date would you like to check? DD/MON - (Enter for Today)" four
fi
while [[ ${three} != [0-9][0-9]:[0-9][0-9] ]]; do
	echo
		read -p "You didn't select the proper time, try again please HH:MM - " three
	echo
done
	year=$(date +%Y)
	hour=$(echo ${three} | awk -F':' '{print $1}')
	min=$(echo ${three} | awk -F':' '{print $2}')
if (( ${min} <= 14 )); then
	hhmm="${year}:${hour}:(0[0-9]|1[0-4])"
elif (( ${min} > 14 )) && (( ${min} <= 29 )); then
	hhmm="${year}:${hour}:(1[5-9]|2[0-9])"
elif (( ${min} > 29 )) && (( ${min} <= 44 )); then
	hhmm="${year}:${hour}:(3[0-9]|4[0-4])"
elif (( ${min} > 44 )) && (( ${min} <= 59 )); then
	hhmm="${year}:${hour}:(4[5-9]|5[0-9])"
fi
if [[ -n ${four} ]]; then
	four=$(echo ${four} | awk '{print tolower($0)}')
fi
if [[ -z ${four} ]] || [[ ${four} = $(date +%d/%b | awk '{print tolower($0)}') ]]; then
	ssh -tq ${uname}@${acct_ip} "echo; sudo -v
		echo -e \"\\\n${sshbr}\033[1;31m\"NGINX\"\033[1;000m log counts for ${hhmm}:\\\n\\\nHits - Account\"
			for log in \$(sudo find /var/log/nginx/ -maxdepth 1 -type f ! -name *staging* ! -name *apache* ! -name *gz ! -name *1)
				do echo \$(sudo grep -E \"${hhmm}\" \${log} | wc -l) - \$(echo \${log} | awk -F'/' '{print \$5}' | awk -F'.' '{print \$1}') | grep -v ^0
			done | sort -nk1 | tail
		echo -e \"\\\n${sshbr}\033[1;31m\"Apache\"\033[1;000m log counts for ${hhmm}:\\\n\\\nHits - Account\"
			for log in \$(sudo find /var/log/apache2/ -maxdepth 1 -type f ! -name *staging* ! -name *gz ! -name *1)
				do echo \$(sudo grep -E \"${hhmm}\" \${log} | wc -l) - \$(echo \${log} | awk -F'/' '{print \$5}' | awk -F'.' '{print \$1}') | grep -v ^0
			done | sort -nk1 | tail
	exit"
else
	echo -e "\n\033[1;31m\"THIS IS GOING TO TAKE SOME TIME\"\033[1;000m"
	ssh -tq ${uname}@${acct_ip} "echo; sudo -v
		mintime=\$(expr \$(expr \$(date +%s) - \$(date -d \"\$(echo \"${four}\" | awk -F\"/\" '{print \$1 \$2 '\$(date +%Y)'}')\" +%s)) / 86400 - 2)
		maxtime=\$(expr \$(expr \$(date +%s) - \$(date -d \"\$(echo \"${four}\" | awk -F\"/\" '{print \$1 \$2 '\$(date +%Y)'}')\" +%s)) / 86400 + 1)
		echo -e \"\\\n${sshbr}\033[1;31m\"NGINX\"\033[1;000m log counts:\\\n\\\nHits - Account\"
			for log in \$(sudo find /var/log/nginx/ -maxdepth 1 -type f ! -name *apache* ! -name *staging* ! -name *.log -mtime +\${mintime} -mtime -\${maxtime})
				do echo \$(sudo zcat -f \${log} | grep -i ${four} | grep -E \"${hhmm}\" | wc -l) - \$(echo \${log} | awk -F'/' '{print \$5}' | awk -F'.' '{print \$1}') | grep -v ^0
			done | sort -nk1 | tail
		echo -e \"\\\n${sshbr}\033[1;31m\"Apache\"\033[1;000m log counts:\\\n\\\nHits - Account\"
			for log in \$(sudo find /var/log/apache2/ -maxdepth 1 -type f ! -name *staging* ! -name *.log ! -name *error* -mtime +\${mintime} -mtime -\${maxtime})
				do echo \$(sudo zcat -f \${log} | grep -i ${four} | grep -E \"${hhmm}\" | wc -l) - \$(echo \${log} | awk -F'/' '{print \$5}' | awk -F'.' '{print \$1}') | grep -v ^0
			done | sort -nk1 | tail
	exit"
fi
echo -e "\n${br}"
 read -p "Which Account's log would you like to check? X to quit - " a
 echo
 if [[ ${a} = [Xx] ]]; then
 	exit
 else
 	while [[ ${a} = [a-zA-Z][a-zA-Z0-9]* ]]; do
		acct=${a}
		slogchk
		read -p "Check Another Account? \"account name\" or X - " a
	done
 fi
 }
#---------------------------------------------------------------------------------------------#
#### NEED TO ADD TO YSLOW GROUP ####
### slogchk => Description: Show heaviest requests and IP's in log after running "slog".
### Usage: l2 slogchk <account> <HH:MM> <DD/MON>
### Example l2 slogchk wpengine 14:25 04/Mar
slogchk (){
	if [[ -z ${three} ]] && [[ -z ${hhmm} ]]; then
		read -p "What Time (UTC) would you like to Check? HH:MM - " three
	fi
	while [[ ${three} != [0-9][0-9]:[0-9][0-9] ]]; do
		echo
			read -p "You didn't select the proper time, try again please HH:MM - " three
		echo
	done
year=$(date +%Y)
hour=$(echo ${three} | awk -F':' '{print $1}')
min=$(echo ${three} | awk -F':' '{print $2}')
if (( ${min} <= 14 )); then
 	hhmm="${year}:${hour}:(0[0-9]|1[0-4])"
elif (( ${min} > 14 )) && (( ${min} <= 29 )); then
 	hhmm="${year}:${hour}:(1[5-9]|2[0-9])"
elif (( ${min} > 29 )) && (( ${min} <= 44 )); then
	hhmm="${year}:${hour}:(3[0-9]|4[0-4])"
elif (( ${min} > 44 )) && (( ${min} <= 59 )); then
 	hhmm="${year}:${hour}:(4[5-9]|5[0-9])"
fi
if [[ -n ${four} ]]; then
 	four=$(echo ${four} | awk '{print tolower($0)}')
fi
if [[ -z ${four} ]] || [[ ${four} = $(date +%d/%b | awk '{print tolower($0)}') ]]; then
	alog="/var/log/apache2/${acct}.access.log"
	nlog="/var/log/nginx/${acct}.access.log" 
	ssh -tq ${uname}@${acct_ip} "echo; sudo -v
		echo -e \"\\\n\033[1;31m\"NGINX:\"\033[1;000m\\\n${sshbr}Most frequent requests\\\n\"
			while read line
				do awk -F\"|\" '{print \$10}' | awk '{print \$2}'
			done < <(sudo grep -E \"${hhmm}\" ${nlog})| sort | uniq -c | sort -nk1 | tail -5
		echo -e \"\\\n${sshbr}Most frequent IP's\\\n\"
			while read line
				do awk -F\"|\" '{print \$3}' | sort | uniq -c | sort -nk1 | tail -5
			done < <(sudo grep -E \"${hhmm}\" ${nlog})
		echo -e \"\\\n${sshbr}Last 20 Hits to Log\\\n\"
			sudo grep -E \"${hhmm}\" ${nlog} | tail -n 20
		echo -e \"\\\n\033[1;31m\"APACHE:\"\033[1;000m\\\n${sshbr}Most frequent requests\\\n\"
			while read line
				do awk '{print \$1,\$4\"]\",\$5,\$6,\$7,\$8}'
			done < <(sudo grep -E \"${hhmm}\" ${alog})| grep -oP '(?<=\\\").*(?=\\\")' | sort | uniq -c | sort -nk1 | tail -5
		echo -e \"\\\n${sshbr}Most frequent IP's\\\n\"
			while read line
				do awk '{print \$1}' | sort | uniq -c | sort -nk1 | tail -5
			done < <(sudo grep -E \"${hhmm}\" ${alog})
		echo -e \"\\\n${sshbr}Last 20 Hits to Log\\\n\"
			sudo grep -E \"${hhmm}\" ${alog} | tail -n 20
	exit"
else
	alog="for i in \$(sudo find /var/log/apache2/ -maxdepth 1 -type f -iname \"${acct}.access.log.*\" -mtime +\${mintime} -mtime -\${maxtime}); do echo \${i}; done"
	nlog="for i in \$(sudo find /var/log/nginx/ -maxdepth 1 -type f -iname \"${acct}.access.log.*\" -mtime +\${mintime} -mtime -\${maxtime}); do echo \${i}; done"
	ssh -tq ${uname}@${acct_ip} "echo; sudo -v
		mintime=\$(expr \$(expr \$(date +%s) - \$(date -d \"\$(echo \"${four}\" | awk -F\"/\" '{print \$1 \$2 '\$(date +%Y)'}')\" +%s)) / 86400 - 2)
		maxtime=\$(expr \$(expr \$(date +%s) - \$(date -d \"\$(echo \"${four}\" | awk -F\"/\" '{print \$1 \$2 '\$(date +%Y)'}')\" +%s)) / 86400 + 1)
		echo -e \"\\\n\033[1;31m\"NGINX:\"\033[1;000m\\\n${sshbr}Most frequent requests\\\n\"
				while read line
					do awk -F\"|\" '{print \$10}' | awk '{print \$2}'
				done < <(sudo zcat -f \$(${nlog}) | grep -i ${four} | grep -E \"${hhmm}\")| sort | uniq -c | sort -nk1 | tail -5
			echo -e \"\\\n${sshbr}Most frequent IP's\\\n\"
				while read line
					do awk -F\"|\" '{print \$3}' | sort | uniq -c | sort -nk1 | tail -5
				done < <(sudo zcat -f \$(${nlog}) | grep -i ${four} | grep -E \"${hhmm}\")
			echo -e \"\\\n${sshbr}Last 20 Hits to Log\\\n\"
				sudo zcat -f \$(${nlog}) | grep -i ${four} | grep -E \"${hhmm}\" | tail -n 20
			echo -e \"\\\n\033[1;31m\"APACHE:\"\033[1;000m\\\n${sshbr}Most frequent requests\\\n\"
				while read line
					do awk '{print \$1,\$4\"]\",\$5,\$6,\$7,\$8}'
				done < <(sudo zcat -f \$(${alog}) | grep -i ${four} | grep -E \"${hhmm}\")| grep -oP '(?<=\\\").*(?=\\\")' | sort | uniq -c | sort -nk1 | tail -5
			echo -e \"\\\n${sshbr}Most frequent IP's\\\n\"
				while read line
					do awk '{print \$1}' | sort | uniq -c | sort -nk1 | tail -5
				done < <(sudo zcat -f \$(${alog}) | grep -i ${four} | grep -E \"${hhmm}\")
			echo -e \"\\\n${sshbr}Last 20 Hits to Log\\\n\"
				sudo zcat -f \$(${alog}) | grep -i ${four} | grep -E \"${hhmm}\" | tail -n 20
	exit"
fi
echo -e "\n${br}"
}
#---------------------------------------------------------------------------------------------#

## acct-count => Description: Count how many active accounts a customer has.
# Usage: l2 acct-count <account>
acct-count (){
ssh -tq ${uname}@${acct_ip} "echo; sudo -v; count=0
	for i in \$(sudo /nas/wp/ec2/cluster parent-child ${acct})
		do [ -d /nas/wp/www/sites/\$i ] && let count=count+1; done
	echo -e \"\\\n${sshbr}\\\n   \033[1;31m"${acct}"\033[1;000m Has \${count} Active Accounts on \$(hostname)\\\n\\\n${sshbr}\"
	for i in \$(sudo /nas/wp/ec2/cluster parent-child ${acct})
		do let count=count+1; done
	echo -e \"\\\n   \033[1;31m"${acct}"\033[1;000m Has \${count} Accounts Active or De-Active.\\\n\\\n${sshbr}\"
exit"
}
#---------------------------------------------------------------------------------------------#
#### NEED TO TURN THESE TWO INTO A "FILE" COMMAND ####
### get-file => Description: Get a file from a Site Directory
### Usage: l2 get-file <account> <envir> <Remote File> <Local Dest>
get-file (){
	envir
	if [[ -n ${four} ]] && [[ -n ${five} ]]; then
		remote=${four}
		local=${five}
	elif [[ -n ${four} ]] && [[ -z ${five} ]]; then
		dir=${four}
		read -p "Where would you like this file on your local machine? " local
	else
		read -p "Where is this file in the Sites Directory? " remote
		echo && read -p "Where would you like this file on your local machine? " local
	fi
		echo -e "\nGetting the file from the ${envir} Server\n${br}"
		scp -rq ${uname}@${acct_ip}:/nas/wp/www/${envir}/${acct}/${remote} ${local}
		read -p "What command do you want to use to Open it with? (Press Enter to skip) " cmd
			if [[ -z ${cmd} ]]; then
				exit 0
			else
			echo -e "\nRight, running \"${cmd} ${local}\"\n${br}"
			sleep 2
			${cmd} ${local}
			fi
}

### put-file => Description: Put a file in Site Directory
### Usage: l2 put-file <account> <envir> <Local File> <Remote Dest>
put-file (){
	envir
	if [[ -n ${four} ]] && [[ -n ${five} ]]; then
		local=${four}
		remote=${five}
	elif [[ -n ${four} ]] && [[ -z ${five} ]]; then
		local=${four}
		read -p "Where do you want it on the server? " remote
	else
		read -p "Where is the file? " local
		echo && read -p "Where do you want it on the server? " remote
	fi
		echo -e "\nPutting the File on the ${envir} Server\n"
		scp -rq ${local} ${uname}@${acct_ip}:/home/${uname}/${local}
		ssh -tq ${uname}@${acct_ip} "sudo mv ${local} /nas/wp/www/${envir}/${acct}/${remote} && exit ; bash"
}
#---------------------------------------------------------------------------------------------#

## htop => Description: Run htop on the customers server.
# Usage: l2 htop <account>
htop (){
	ssh -tq ${uname}@${acct_ip} "htop; exit"
	# echo && read -p "Would you like to run the hiload function too? ( X to exit ) - " q
	# 	if [[ ${q} = [xX] ]]; then
	# 		exit 0
	# 	else
	# 		hiload
	# fi
}
#---------------------------------------------------------------------------------------------#
#### NEED TO ADD TO YSLOW GROUP ####
### ttfb => Description: Measure TTFB 10 times with 1s intervals.
### Usage: l2 ttfb <domain.com>
ttfb (){
if [[ -n ${acct} ]]; then
	echo -e "\n\nTTFB measured 10 times with 1s intervals:"
	counter=0; 
	echo -e ${br}"\n Testing: ${acct}\n"
		for counter in {1..10}; do 
		echo ${counter} - $(curl -o /dev/null -w "Connect: %{time_connect} TTFB: %{time_starttransfer} Total time: %{time_total} \n" --silent --output /dev/null ${acct});
		sleep 1
		done
	echo -e ${br};
else
	echo -e "\nUsage: ttfb <domain_name>.\n\n"
	return 0
fi
}
#---------------------------------------------------------------------------------------------#

## dns => Description: Get as much DNS Information as we can.
# Usage: l2 dns <domain.com>
dns (){
	echo -e "\nDig the Domain for its DNS Records\n${br}"
		dig ${acct} | grep -A 3 ";; ANSWER SECTION:"
	echo -e "\nWhois to find their Name Servers\n${br}"
		whois ${acct} | grep -iE "^domain\sname:|^name\sserver:" | sort
		ttfb
	echo -e "\nPinging the Domain 3 times\n${br}"
		ping -c 3 ${acct}
}
#---------------------------------------------------------------------------------------------#

## uncan => Description: Uncancel an account.
# Usage: l2 uncan <account>
uncan (){
	echo -e "\nAlright, lets uncancel that account!\n${br}"
	ssh -tq ${uname}@${acct_ip} "sudo /nas/wp/ec2/cluster uncancel-site ${acct}; exit"
}
#---------------------------------------------------------------------------------------------#
#### THIS IS NOW IN OVER DRIVE ####
### bot-redirect => Description: Turn off the Bot Redirect
### Usage: l2 bot-redirect <account>
bot-redirect (){
	echo -e "\nTurning off the Redirect\n${br}"
		ssh -tq ${uname}@${acct_ip} "echo & sudo -v
			php /nas/wp/www/tools/wpe.php option-set ${acct} redirect_bots '0';
				echo -e \"\\\nRunning PRA / RS to wrap it all up\\\n${sshbr}
			sudo /nas/wp/admin perm-reload-apply ${acct}
			sudo /nas/wp/admin reload ${acct}
		exit"
}
#---------------------------------------------------------------------------------------------#

## clear-rewrites => Description: Clear out the accounts Rewrite Rules.
# Usage: l2 clear-rewrites <account>
clear-rewrites (){
	echo -e "\nClearning out the Rewrite Rules\n${br}"
	ssh -tq ${uname}@${acct_ip} "echo & sudo -v
		sudo php /nas/wp/www/tools/wpe.php option-set ${acct} rewrites NULL
			echo -e \"\\\nReloading Config to wrap it all up\\\n${ssshbr}\"
		sudo /nas/wp/admin regen-conf ${acct}
	exit"
}
#---------------------------------------------------------------------------------------------#
## logs => Description: Print the NGINX or Apache Access Logs
# Usage: l2 logs <account> -a -n -d <MM/DD>
logs (){ local OPTIND
while getopts ":and:" opt; do
	case ${opt} in
		a)
			serv='apache2';;
		d)
			date=$OPTARG;;
		n)
			serv='nginx';;
	esac
done
# Set a default service
if [[ -z ${serv} ]]; then
	serv='nginx'
fi
# Ensure uniform date input
san_date ${date}
# Hit up the logs if $date = today
if [[ -z ${date} ]] || [[ ${date} = $(date +%Y%m%d) ]]; then
	while true; do
		ssh -tq ${uname}@${acct_ip} "echo & sudo -v
			sudo less /var/log/${serv}/${acct}.access.log
			echo -e \"All Done, Next up.\\\n\"
			exit"
	echo
	read -p "Would you like to try the other Access Logs? ( Y / N ) " a
		if [[ ${a} = [yY] ]]; then
			if [[ ${serv} = [n]* ]]; then
				serv="apache2"
			elif [[ ${serv} = [a]* ]]; then
				serv="nginx"
			fi
		else
			echo & exit
		fi
	done
# Hit up logs from the past
else
	today=$(date +%Y%m%d)
	if [[ $(expr $(date -d ${today} +%s) / 86400 - 6) -gt $(expr $(date -d ${date} +%s) / 86400) ]]; then
		echo; read -p "That date is too far back (6 day range). Try another? (MM/DD)  " date
		# Ensure uniform date input
		san_date ${date}
	fi
	read -p "Just Look or Save to file? " opt
	while true; do
		if [[ ${opt} = [sS]* ]]; then
			opt="> ${acct}.${serv}.${date}.log | sudo mv ${acct}.${serv}.${date}.log /nas/wp/www/sites/${acct}/_wpeprivate/${acct}.${serv}.${date}.log"
		else
			opt="| less"
		fi
	log="for i in \$(sudo find /var/log/${serv}/ -maxdepth 1 -type f -iname \"${acct}.access.log.*\" -mtime +\${mintime} -mtime -\${maxtime}); do echo \${i}; done"
	ssh -tq ${uname}@${acct_ip} "echo & sudo -v
		mintime=\$(expr \$(expr \$(date +%s) - \$(date -d \"${date}\" +%s)) / 86400 - 2)
		maxtime=\$(expr \$(expr \$(date +%s) - \$(date -d \"${date}\" +%s)) / 86400 + 1)
				sudo zcat -f \$(${log}) | zgrep -i \"$(date -d ${date} +%d/%b)\" ${opt}
				echo -e \"All Done, Next up.\\\n\"
		exit"
	echo
	read -p "Would you like to try the other Access Logs? ( Y / N ) " a
		if [[ ${a} = [yY] ]]; then
			if [[ ${serv} = [n]* ]]; then
				serv="apache2"
			elif [[ ${serv} = [a]* ]]; then
				serv="nginx"
			fi
		else
			echo & exit
		fi
	done
fi
}
#---------------------------------------------------------------------------------------------#

## stage-backup => Description: Backup the Staging Site
# Usage: l2 stage-backup <account>
stage-backup (){
	ssh -tq ${uname}@${acct_ip} "sudo -v; cd /nas/wp/www/staging/${acct}
		mysqldump -u ${acct} -p\$(cat wp-config.php | grep \"define( 'DB_PASSWORD\" |  awk -F\"'\" '{print \$4}') snapshot_${acct} > mysql_$(date +%M).sql
		if (( \$(df | grep /dev/xvda | awk '{print \$4}') > (\$(tar cf - * | wc -c) / 1024) * 10 )); then
			sudo tar -cvzf /nas/wp/www/sites/${acct}/_wpeprivate/${acct}-staging-\$(date +%H_%M).tar.gz --exclude wp-admin --exclude wp-includes *
			rm -f mysql_$(date +%M).sql
		else echo -e \"\\\nIt seems that the size of this backup is larger than the Available Disk.\\\n\\\nDisk Space - \$(df -h | grep /dev/xvda | awk '{print \$4}')\\\n\\\nSize of the Backup ~ \$(expr \$(expr \$(tar cf - * | wc -c) / 1048576) \* 5)Mb\\\n\\\n\"
		fi"
}
#---------------------------------------------------------------------------------------------#

#################### USER NAME ####################
## setuname => Description: Reset your SSH User Name.
# Usage: l2 setuname
setuname (){
	read -p "What is your SSH User Name? " name
		sudo sed -ie "s/^uname=.*/uname=${name}/g" ${0}
}
uname=bmoore_
#---------------------------------------------------------------------------------------------#

#################### UNIFORM DATE INPUT ####################
san_date (){
	# Lets ensure, uniform, and sanitize our Date input
if [[ -n ${date} ]]; then
# Make sure we have the current Month
    if [[ ${date} =~ ^[0-9]{2}$ ]]; then
    	date="$(date +%Y%m)${date}"
    # Make sure we have the curent Year
    elif [[ ${date} =~ ^[0-9]{2}([^a-zA-Z0-9])[0-9]{2}$ ]]; then 
    	# Sanitize $date first
    	if [[ $date =~ [/.] ]]; then
    		date=$(echo ${date} | sed -e "s/[./]/\-/g")
    	fi
    	date="$(date +%Y)-${date}"
    # If date is MMDD
	elif [[ ${date} =~ ^[0-9]{4}$ ]]; then
		date=$(date +%Y)${date}
    fi
    # Convert it to what we need
    	date=$(date -d ${date} +%Y%m%d)
fi
}
#---------------------------------------------------------------------------------------------#

#################### Help ####################
## help => Description: Print out some notes about how to use X function.
# Usage: l2 help function
help (){
	fn=${2}
	if [[ -z ${fn} ]]; then
		echo -e "${br}Available tasks:\n"
			grep -irn "^##\s" ${0} | awk '{$2="\033[1;31m"$2"\033[1;000m"; print $2}' | sort
		echo -e "\n${br}"
			read -p "Type function name that you wish to check ( X to exit ): " fn
		echo
	fi
	if [[ ${fn} = [xX] ]]; then
		exit 0
	else
		grep -A 1 -E "^##\s${fn}" ${0}
		echo -e "\n${br}"
	fi
}
#---------------------------------------------------------------------------------------------#

#################### Get Account ####################
account (){

	# define the accnt variable
acct=${2}

	# Was the account defined properly?
if [[ -z ${2} ]] || [[ ${2} == -* ]]; then
	if [[ ${1} = dns ]] || [[ ${1} = ttfb ]]; then
		echo && read -p "What Website are we working with? " acct
	else
		echo && read -p "What Account are we working with? " acct
	fi
fi

	# Check if it's a pod
if [[ ${acct} =~ ^[0-9]{3,5}$ ]]; then
	acct="pod-${acct}"
	pod=${acct}
elif [[ ${acct} =~ ^pod-[0-9]{3,5}$ ]]; then
	acct=${acct}
	pod=${acct}
fi
	#acct_ip=$(dig ${acct}.wpengine.com | grep -A 3 ";; ANSWER SECTION:" | egrep -m 1 "(([0-9]{1,3}\.){3}[0-9]{1,3})" | awk '{print $5}')
	acct_ip=$(dig +short ${acct}.wpengine.com)
}
#---------------------------------------------------------------------------------------------#

#################### Update ####################
## update => Description: Get the latest version of this script.
# Usage: l2 update
update (){
	if [[ $(uname) = [lL]inux ]]; then
		sudo -v; sudo curl https://raw.githubusercontent.com/bmo-tv/Scripts/master/l2 -o /usr/sbin/l2
		sudo chown root:root /usr/sbin/l2; sudo chmod +x /usr/sbin/l2
		echo; l2 setuname; echo
	else
		sudo -v; sudo curl -k -3 https://raw.githubusercontent.com/bmo-tv/Scripts/master/l2 -o /usr/sbin/l2
		sudo chown root:wheel /usr/sbin/l2; sudo chmod +x /usr/sbin/l2
		echo; l2 setuname; echo
	fi
}
#---------------------------------------------------------------------------------------------#

#################### MENU ####################
menu (){
while [[ -z ${cmd} ]]; do
	echo -e "\n${br}Available tasks:\n"
	grep "^##\s" ${0} | awk '{$1=""; $2="\033[1;31m"$2"\033[1;000m"; print}' | sort
	echo -e ${br}
	read -p "Type function name that you wish to use ( X to exit ): " cmd
	echo
	if [[ ${cmd} = [xX] ]]; then
		exit 0
	else
		if [[ ! ${cmd} =~ ('help'|setuname|update) ]]; then
			account
		fi
		declare -F ${cmd} &>/dev/null && echo && ${cmd} && echo && exit 0 || echo -e "${cmd}\nYou Didn't do it right! Try again.\n"; cmd=""
	fi
done
}
#---------------------------------------------------------------------------------------------#

#################### Set Global Vars ####################

br="++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
sshbr="++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\\n"
epoch=$(date +%s)
#---------------------------------------------------------------------------------------------#

#################### Set Username ####################

if [[ -z ${uname} ]]; then
	setuname
	exit 0
fi
#---------------------------------------------------------------------------------------------#

#################### Run It ####################
if [[ -n ${1} ]]; then
	cmd=${1}
	if [[ ! ${cmd} =~ (setuname|update|'help') ]]; then
		echo -e "\nYour current username is set to: \033[1;31m"${uname}"\033[1;000m"
		account ${cmd} ${2}
		shift 2
	fi	
	echo
	declare -F ${cmd} &>/dev/null && ${cmd} $* && exit 0 ||
		echo -e "\n\033[1;31m"Looks like you entered the wrong function."\033[1;000m\n\nUsage is: l2 <function> <account> <optional argument>\n" && menu
else
	echo -e "\nUsage is: l2 <function> <account> <optional argument>\n"
	menu
fi
#---------------------------------------------------------------------------------------------#