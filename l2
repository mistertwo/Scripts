#!/bin/bash
#Author: BMO and JM
#Version: 0.2.6
# 0.2.6 -- Color Coded a Menu Error Message - 2/4/14
# 0.2.6 -- Can Exit the main menu now. - 2/4/14
# 0.2.6 -- Made the menu more dynamic. - 2/4/14
# 0.2.6 -- Changed the version numbers. 1.0 is when its rolled out to all. - 2/4/14
# 2.5 -- Started cleaning up the multiple SSH connections - 1/31/14
# 2.5 -- Stringed Hiload, Slog, and Slogchk together better - 1/31/14
# 2.5 -- Switched from 3 results to 5 in "slogchck" - 1/31/14
# 2.5 -- Added the Pod function through the script - 1/31/14
# 2.4 -- Better Account function to detect Pods - 1/30/14
# 2.3 -- Narrowed Down the slog and slogchk functions to 15 min segments, aka: 1/4 hours.
# 2.2 -- slog and slogchk functions have been added
# 2.2 -- A few functions have been stringed together
# 2.2 -- Still working on the "Find" function
# 2.1 -- Cleaner commands and results with the "Find" function




#################### FUNCTIONS ####################
#---------------------------------------------------------------------------------------------#
## www-codes => Description: Grab occurrences of a certain HTTP code in an account's logs.
#Usage l2 www-codes <account> <error code>
function www-codes {
if [[ -z ${three} ]]; then
	read -p "What HTTP Code would you like to search for? " err
else
	err=${three}
fi
ssh -tq ${uname}@${acct}.wpengine.com "sudo cat /var/log/nginx/${acct}.access.log > /home/${uname}/${acct}.${epoch}.nginx && sudo cat /var/log/apache2/${acct}.access.log > /home/${uname}/${acct}.${epoch}.apache && exit ; bash"
scp -rq ${uname}@${acct}.wpengine.com:/home/${uname}/${acct}.${epoch}.nginx ${acct}.${epoch}.nginx && scp -rq ${uname}@${acct}.wpengine.com:/home/${uname}/${acct}.${epoch}.apache ${acct}.${epoch}.apache
echo -e "\nDescription: Displays requests that had highest occurrences of the ${err} HTTP Status in ${acct}'s logs. Request counts are to the left of the requests below."
for nglog in ${acct}.${epoch}.nginx
	do echo -e ${br}${nglog}"\n"
		awk -F\| -v code=${err} '{if ($5 ~ code) printf "IP: %s Code: %s Referrer: %s Request: %s\n",$3,$5,$7,$10}' ${nglog}| sort| uniq -c| sort -nk1| tail
	done
for apachelog in ${acct}.${epoch}.apache
	do echo -e ${br}${apachelog}"\n"
		awk -v code=${err} '{if ($9 ~ code) printf "IP: %s Code: %s Referrer: %s Request: %s %s %s\n",$1,$9,$11,$6,$7,$8}' ${apachelog}| sort| uniq -c| sort -nk1| tail
	done
echo -e ${br}
ssh -tq ${uname}@${acct}.wpengine.com "rm ${acct}.${epoch}.nginx ${acct}.${epoch}.apache && exit ; bash" && rm ${acct}.${epoch}.nginx ${acct}.${epoch}.apache
}
#---------------------------------------------------------------------------------------------#

## tfile => Description: Used to touch a file that is 404'ing in an account repeatedly.
#Usage l2 tfile <account> <file name>
function tfile { 
if [[ -z ${three} ]]; then
	read -p "What is the absolute path to the file would you would like to create? " file
else
	file=${three}
fi
echo -e "\nDescription: Touches a file and sets proper permissions to mitigate 404 errors. Try using www-codes first to find 404 errors in an account."
echo ${sp}| ssh -tq ${uname}@${acct}.wpengine.com "cd /nas/wp/www/sites/${acct} && [[ -f ${file} ]] || touch ./${file} && sudo /nas/wp/admin fixperms ${acct} && exit ; bash"
}
#---------------------------------------------------------------------------------------------#

## mig-all => Description: Output lines to migrate every account associated with another account, including parent and children.
#Usage l2 mig-all <account> <Destination Pod>
function mig-all {
if [[ -z ${three} ]]; then
	read -p "What Pod are you moving to? " destpod
else
	destpod=${three}
fi
ssh -tq ${uname}@${acct}.wpengine.com "sudo /nas/wp/ec2/cluster parent-child ${acct} > /home/${uname}/result.${epoch}.txt && hostname | cut -d- -f2 > /home/${uname}/host.${epoch}.txt && exit ; bash"
scp -q ${uname}@${acct}.wpengine.com:/home/${uname}/result.${epoch}.txt result.${epoch}.txt && scp -q ${uname}@${acct}.wpengine.com:/home/${uname}/host.${epoch}.txt host.${epoch}.txt
curpod=$(cat host.${epoch}.txt)
echo -e "\nDescription: Output lines to migrate every account associated with another account, including parent and children."
echo -e ${br}
echo -e $(cat result.${epoch}.txt | sed 's/ /\\n/g') | 
while read
do echo -e "sudo /nas/wp/ec2/cluster move-to-preferred-cluster ${curpod} ${REPLY} ${destpod}"
done
echo -e "\n${br}"
ssh -tq ${uname}@${acct}.wpengine.com "rm result.${epoch}.txt host.${epoch}.txt && exit ; bash" && rm result.${epoch}.txt host.${epoch}.txt
}
#---------------------------------------------------------------------------------------------#

## ng-logs => Description: Show log hits from nginx that took the longest time to complete.
# Usage L2 ng-logs <account>
function ng-logs { 
ssh -tq ${uname}@${acct}.wpengine.com "sudo -v
echo -e \"\\\nDescription: Nginx log entries below are sorted by Page Load Time (8th | delimited column).\"
echo -e \"\\\n${sshbr}Slow requests that did NOT receive a 200 OK HTTP Status Code.\\\n\"
sudo cat /var/log/nginx/${acct}.access.log | awk '!/\|200\|/'| sort -t\| -rnk8| head
echo -e \"\\\n${sshbr}Slow requests that received 200 OK HTTP Status Code.\\\n\"
sudo cat /var/log/nginx/${acct}.access.log | awk '/\|200\|/' | sort -t\| -rnk8| head
echo -e \"${sshbr}\"
exit"
read -p "Check for slow SQL information? Y or N - " answer
if [[ ${answer} = [yY]* ]]; then
	sql-slow
fi
}
#---------------------------------------------------------------------------------------------#

## sql-slow => Description: Show problematic sql information.(DO NOT PASTE THIS COMPLETE OUTPUT TO A CUSTOMER)
#usage l2 sql-slow <account>
function sql-slow {
pod
if [[ -n ${pod} ]]; then
	acct=${pod}
fi 
echo -e "\nDescription: Display problematic MySQL information. (DO NOT PASTE THIS COMPLETE OUTPUT TO A CUSTOMER)\n"
ssh -tq ${uname}@${acct}.wpengine.com "sudo -v
echo -e \"\\n\"${sshbr}\"Show MySQL users that hit the slow query log the most.\\n\"
sudo awk '/User@Host/ {print \$3}' /var/log/mysql/mysql-slow.log| cut -d\[ -f1| sort| uniq -c| sort -nk1| tail -10
echo -e ${sshbr}\"Count of which PHP lines that created slow queries: \\n\"
sudo grep -oP '(?<=\[\/nas\/wp\/www\/cluster\-).*(?=\])' /var/log/mysql/mysql-slow.log| sort| uniq -c| sort -nk1| tail -10
echo -e ${sshbr}\"Heavy SQL Tables based on table size vs. table rows: \\n\"
sudo mysql -e \"select concat(table_schema, '.', table_name), concat(round(table_rows / 1000000, 2), 'M') rows, concat(round(data_length / ( 1024 * 1024 * 1024 ), 2), 'G') DATA, concat(round(index_length / ( 1024 * 1024 * 1024 ), 2), 'G') idx, concat(round(( data_length + index_length ) / ( 1024 * 1024 * 1024 ), 2), 'G') total_size, round(index_length / data_length, 2) idxfrac from information_schema.TABLES ORDER by data_length + index_length DESC limit 10;\"
echo -e ${sshbr}
exit"
if [[ ${acct} != pod-[0-9]* ]]; then
sql-heavy-rows
fi
}
#---------------------------------------------------------------------------------------------#

## sql-heavy-rows => Description: Show which tables have over 5000 rows for an account.
#Usage l2 sql-heavey-rows <account>
function sql-heavy-rows {
ssh -tq ${uname}@${acct}.wpengine.com "sudo -v
echo -e \"\\nTables which have over 5000 rows.\\n${sshbr}Account: ${acct}\nDatabase: wp_${acct}\\n${sshbr}\"
cd /nas/wp/www/sites/${acct} && sudo mysql wp_${acct} -e 'show table status where rows > 5000;'| awk '{print \$1,\$5 }'| sort -nk2| column -t
exit"
echo -e ${br}
}
#---------------------------------------------------------------------------------------------#

## hiload => Description: Show load that was 1.5x the number of processer cores.
# Usage l2 hiload <account> <DD>
function hiload { 
if [[ -z ${three} ]]; then
	read -p "Which Day (must be in 2 digit format)? " day
else
	day=${three}
fi
pod
if [[ -n ${pod} ]]; then
	acct=${pod}
fi
echo -e "\n\nDescription: Show UTC times when load was over 1.5x the number of processor cores for this server."
echo -e ${br}
ssh -tq ${uname}@${acct}.wpengine.com "if [[ ! -f /var/log/sysstat/sa${day} ]]; then echo -e \"\\\nInfo for ${day} does not exist, please try again.\"; else sudo sar -q -f /var/log/sysstat/sa${day}| awk -vcpu=\$(grep ^processor /proc/cpuinfo| wc -l) '{if (\$5 > (1.5 * cpu)) print}'; fi && exit ; bash"
echo -e "\n${br}"
read -p "Run \"slog\" for a certain time? HH:MM or X - " a
echo
if [[ ${a} = [0-9][0-9]:[0-9][0-9] ]]; then
	three=${a}
	slog
fi
}
#---------------------------------------------------------------------------------------------#

## wp-plugins => Description: Show enabled plugins for an account.
#Usage l2 wp-plugins <account>
function wp-plugins {
ssh -tq ${uname}@${acct}.wpengine.com "sudo -v
pf=\$(sudo grep \"table_prefix\" /nas/wp/www/sites/${acct}/wp-config.php | awk 'tolower(\$0) ~ /^\\\$table_prefix/ {gsub(/\"|;|'\"'\"'/,\"\"); print \$3}')
db=wp_${acct}
echo -e \"\\\n\"${sshbr}\"Enabled plugins for account \"${acct}\": \\\n\"
sudo mysql \${db} -e \"select * from \${pf}options where option_name='active_plugins';\"| tr '\"' '\n'| awk -F\/ '/^[a-zA-Z]/ {print \$1}'| sed 1d
exit"
echo -e ${br}
}
#---------------------------------------------------------------------------------------------#

## uptime => Description: Shows how many min/hr had log hits. Ideally 60 for busy site meaning at least one hit per minute happened, and, thus, no downtime.
#Usage l2 uptime <account> <two-digit-day> <three-digit-month> (IE: l2 uptime bmoore 12 dec)
function uptime {
if [[ -z ${three} ]]; then 
	read -p "Which Day (must be in 2 digit format)? " day
	read -p "Which Month (must be in 3 character format, ie. 'Jan')? " mon
elif [[ ${three} != [0-9][0-9] ]]; then
	echo -e "\nLooks like you got it wrong!\nUsage - l2 uptime <account> <two-digit-day> <three-digit-month> (IE: l2 uptime ${acct} 12 dec)\nlets try again.\n"
	read -p "Which Day (must be in 2 digit format)? " day
    read -p "Which Month (must be in 3 character format, ie. 'Jan')? " mon
else
day=${three}
mon=${four}
fi
log="/var/log/apache2/${acct}.access.log"
ssh -tq ${uname}@${acct}.wpengine.com "sudo zgrep -Ei ${day}\"/\"${mon} ${log} | awk '{gsub(/\[|/,\"\"); print \$4}'| sed 's/:[0-9][0-9]$//g'| sort| uniq| sed 's/:[0-9][0-9]$//g'| uniq -c > /home/${uname}/${acct}.${epoch}.access.log
 	 sudo zgrep -Ei ${day}\"/\"${mon} ${log}.1 | awk '{gsub(/\[|/,\"\"); print \$4}'| sed 's/:[0-9][0-9]$//g'| sort| uniq| sed 's/:[0-9][0-9]$//g'| uniq -c >> /home/${uname}/${acct}.${epoch}.access.log
  	 sudo zgrep -Ei ${day}\"/\"${mon} ${log}.2.gz | awk '{gsub(/\[|/,\"\"); print \$4}'| sed 's/:[0-9][0-9]$//g'| sort| uniq| sed 's/:[0-9][0-9]$//g'| uniq -c >> /home/${uname}/${acct}.${epoch}.access.log
   	 sudo zgrep -Ei ${day}\"/\"${mon} ${log}.3.gz | awk '{gsub(/\[|/,\"\"); print \$4}'| sed 's/:[0-9][0-9]$//g'| sort| uniq| sed 's/:[0-9][0-9]$//g'| uniq -c >> /home/${uname}/${acct}.${epoch}.access.log
     sudo zgrep -Ei ${day}\"/\"${mon} ${log}.4.gz | awk '{gsub(/\[|/,\"\"); print \$4}'| sed 's/:[0-9][0-9]$//g'| sort| uniq| sed 's/:[0-9][0-9]$//g'| uniq -c >> /home/${uname}/${acct}.${epoch}.access.log
     sudo zgrep -Ei ${day}\"/\"${mon} ${log}.5.gz | awk '{gsub(/\[|/,\"\"); print \$4}'| sed 's/:[0-9][0-9]$//g'| sort| uniq| sed 's/:[0-9][0-9]$//g'| uniq -c >> /home/${uname}/${acct}.${epoch}.access.log
     exit ; bash"
scp -q ${uname}@${acct}.wpengine.com:/home/${uname}/${acct}.${epoch}.access.log ${acct}.${epoch}.access.log
echo -e "\nCurrent date is "$(date)"\n${br}"
cat ${acct}.${epoch}.access.log | while read line; do awk -v account=${acct} '{printf "Log hits on %s/60 possible minutes during the %s:00-59 time period for "account".\n",$1,$2}'
echo -e ${br}
done
ssh -tq ${uname}@${acct}.wpengine.com "rm ${acct}.${epoch}.access.log && exit ; bash" && rm ${acct}.${epoch}.access.log
}
#---------------------------------------------------------------------------------------------#

## nginx-confg =>  Description: Open the accounts NGINX Config file with less.
#Usage: l2 nginx-conf <account>
function nginx-config {
	ssh -tq ${uname}@${acct}.wpengine.com "if [[ ! -f /nas/wp/conf/lb/sites/${acct}.conf ]]
	then echo -e \"\\\nNo File, maybe you typed the account wrong?\"
	exit
    else
    less /nas/wp/conf/lb/sites/${acct}.conf
    exit
	fi"
}
#---------------------------------------------------------------------------------------------#

## login =>  Description: Login to an Account via SSH (location optional)
# UsageL l2 login <account> <environment> <location>
function login {
	pod
	if [[ -n ${pod} ]]; then
		if [[ -n ${three} ]]; then
		echo -e ${br}"Alright, Logging into ${pod} and going to ${three}.\n"
			ssh -tq ${uname}@${pod}.wpengine.com "cd ${three}; bash"
		else
		echo -e ${br}"Alright, logging into ${pod}.\n"
			ssh -tq ${uname}@${pod}.wpengine.com
		fi
	else
		envir
		if [[ -n ${four} ]]; then
		echo -e ${br}"Alright, Logging into the ${envir} and going to ${four}\n"
			ssh -tq ${uname}@${acct}.wpengine.com "cd /nas/wp/www/${envir}/${acct}/${four}; bash"
		else
		echo -e ${br}"Alright, logging into the ${envir} Server\n"
			ssh -tq ${uname}@${acct}.wpengine.com "cd /nas/wp/www/${envir}/${acct}; bash"
		fi
	fi
	echo
}
#---------------------------------------------------------------------------------------------#

## find => Description: Find either a File or a String of Text in the account.
# Usage: l2 find <account> <envir> "<file/text>"
function find {
	envir
	if [[ -n ${four} ]]; then
		search=${four}
	elif [[ -z ${four} ]]; then
		echo -e ${br}
		read -p "What are you looking for? " search
		echo
	fi
	echo -e "\n"${br}
	read -p "Is this a File or a String that you are looking for? " which
	if [[ ${which} = f* ]]; then
		ssh -tq ${uname}@${acct}.wpengine.com "cd /nas/wp/www/${envir}/${acct}/ && find . -type f -iname \"*${search}*\" ! -path \"./wp-admin/*\" ! -path \"./wp-includes/*\" > /home/${uname}/find.${epoch} && exit ; bash"
		scp -rq ${uname}@${acct}.wpengine.com:/home/${uname}/find.${epoch} find.${epoch}
		nl find.${epoch}
	else
		ssh -tq ${uname}@${acct}.wpengine.com "cd /nas/wp/www/${envir}/${acct} && sudo grep -irn --exclude=*.{sql,png,pdf,csv,jpeg,jpg,gif,zip,tar,tar.gz} --exclude-dir=wp-includes --exclude-dir=wp-admin -e \"${search}\" * > /home/${uname}/ack.${epoch}; exit"
		scp -rq ${uname}@${acct}.wpengine.com:/home/${uname}/ack.${epoch} ack.${epoch}
		nl ack.${epoch}
		awk -F':' '{print $1}' ack.${epoch} > find.${epoch}
		awk -F':' '{print $2}' ack.${epoch} > line.${epoch}
	fi
	echo -e ${br}
	read -p "Which File would you like to Open? Pick a number. " num
		while [[ ${num} = [0-9]* ]]; do
			pick=$(sed -n "${num}"p find.${epoch})
			if [[ ${which} != f* ]]; then
				pickline=$(sed -n "${num}"p line.${epoch})
				ssh -tq ${uname}@${acct}.wpengine.com "cd /nas/wp/www/${envir}/${acct} && sudo nano +${pickline} ${pick} && exit ; bash"
				echo
				nl ack.${epoch}
			else
				ssh -tq ${uname}@${acct}.wpengine.com "cd /nas/wp/www/${envir}/${acct} && sudo nano ${pick} && exit ; bash"
				echo
				nl find.${epoch}
			fi
		echo -e ${br}
		read -p "Would you like to open another? Press X to finish " num
		done
	ssh -tq ${uname}@${acct}.wpengine.com "rm -f find.${epoch} ack.${epoch}; exit" && rm -f find.${epoch} ack.${epoch} line.${epoch}
}
#---------------------------------------------------------------------------------------------#

## duplicity => Description: Get the files for a Site or Specific Folder from our Duplicity Backup (full backup)
# Usage: l2 duplicity <account> <date> <file/folder>
function duplicity {
	if [[ ${three} = [0-9]* ]]; then
		date=${three}
	else
		# Get the Date to restore from
		read -p "From what date? YYYMMDD " date
		echo
    fi
    if [[ -n ${four} ]]; then
    	folder=${four}
    else
		# Optionally, get a specific folder
		read -p "Which Folder or File? (Press enter for the whole site) " folder
		echo -e "\n"${br}
	fi
	# Do the things
	if [[ -n ${folder} ]]; then
		ssh -tq ${uname}@${acct}.wpengine.com "cd /var/tmp && sudo duplicity_restore_v2 -s ${acct} -d ${date} -r ${folder} && sudo mv -f ${acct} /home/${uname}/ && exit ; bash"
	else
		ssh -tq ${uname}@${acct}.wpengine.com "cd /var/tmp && sudo duplicity_restore_v2 -s ${acct} -d ${date} -r / && sudo mv -f ${acct} /home/${uname}/ && exit ; bash"
	fi
	# You did it! Now what would you like to do with this file?
	clean=n
	while [[ ${clean} = n* ]] || [[ ${clean} = N* ]]; do
	echo -e "\n"${br}
	read -p "Would you like to Download, Rsync, or Move the results? (press Enter for None of these) " option
	echo -e ${br}
		if [[ ${option} = d* ]] || [[ ${option} = D* ]]; then
			ssh -tq ${uname}@${acct}.wpengine.com "tar -cvf ${acct}-duplicity.${epoch}.tar ${acct} && exit ; bash"
			scp ${uname}@${acct}.wpengine.com:${acct}-duplicity.${epoch}.tar ${acct}-duplicity.${epoch}.tar 
		elif [[ ${option} = r* ]] || [[ ${option} = R* ]]; then
			echo -e "\nSending you in as Root -> Best of luck soldier. (~sad trumpet plays in the background~)\n"
			ssh -tq ${uname}@bmoore.wpengine.com "sudo ssh root@${acct}.wpengine.com && exit ; bash"
		elif [[ ${option} = m* ]] || [[ ${option} = M* ]]; then
			read -p "Tar it or as is? " method
				if [[ ${method} = t* ]]; then
					ssh -tq ${uname}@${acct}.wpengine.com "tar -cvf ${acct}-duplicity.${epoch}.tar ${acct} && sudo mv ${acct}-duplicity.${epoch}.tar /nas/wp/www/sites/${acct}/_wpeprivate/ && exit ; bash"
				else
					ssh -tq ${uname}@${acct}.wpengine.com "sudo mv -f ${acct} /nas/wp/www/sites/${acct}/_wpeprivate/ && exit ; bash"
				fi
		elif [[ -z ${option} ]]; then
			echo "\nAlright, dropping you in the folder, have fun.\n"
			ssh -tq ${uname}@${acct}.wpengine.com
		fi
	echo -e ${br}
	read -p "All Done? Clean up? Yes or No " clean
	echo
	done
	sleep .5
	ssh -tq ${uname}@${acct}.wpengine.com "sudo rm -rf ${acct} && if [[ -f ${acct}-duplicity.${epoch}.tar ]]; then rm -f ${acct}-duplicity.${epoch}.tar; fi && exit; bash"
}
#---------------------------------------------------------------------------------------------#

## slog => Description: Count which Apache log had the most hits in a time range.
# Usage: l2 slog <account> <HH:MM>
# Example l2 slog wpengine 14:25
function slog {
	if [[ -z ${three} ]]; then
		read -p "What Time (UTC) would you like to Check? HH:MM - " three
	fi
year=$(date +%Y)
hour=$(echo ${three} | awk -F':' '{print $1}')
min=$(echo ${three} | awk -F':' '{print $2}')
if (( ${min} <= 14 )); then
 	hhmm="${year}:${hour}:(0[0-9]|1[0-4])"
 elif (( ${min} > 14 )) && (( ${min} <= 29 )); then
 	hhmm="${year}:${hour}:(1[5-9]|2[0-9])"
 elif (( ${min} > 29 )) && (( ${min} <= 44 )); then
 	hhmm="${year}:${hour}:(3[0-9]|4[0-4])"
 elif (( ${min} > 44 )) && (( ${min} <= 59 )); then
 	hhmm="${year}:${hour}:(4[5-9]|5[0-9])"
 fi
 pod
 if [[ -n ${pod} ]]; then
	acct=${pod}
 fi
 echo -e "\n${br}\nApache log counts for ${hhmm}:\n"
 ssh -tq ${uname}@${acct}.wpengine.com "sudo -v
 while read log
 do count=\$(sudo grep -E \"${hhmm}\" \${log}| wc -l)
 echo \${count} - \${log}| grep -v ^0
 done < <(sudo find /var/log/apache2/ -maxdepth 1 -type f ! -name \*staging\* ! -name \*gz ! -name \*1) | sort -nk1 | tail
 exit"
 echo -e ${br}
 read -p "Which Account's log would you like to check? X to quit - " logchk
 if [[ ${logchk} = [Xx] ]]; then
 	exit
 else
 	acct=${logchk}
 	slogchk
 fi
 }
#---------------------------------------------------------------------------------------------#

## slogchk => Description: Show heaviest requests and IP's in log after running "slog".
# Usage: l2 slogchk <account> <HH:MM>
# Example l2 slogchk wpengine 14:25
function slogchk {
year=$(date +%Y)
	if [[ -z ${three} ]] && [[ -z ${hhmm} ]]; then
		read -p "What Time (UTC) would you like to Check? HH:MM - " three
	fi
year=$(date +%Y)
hour=$(echo ${three} | awk -F':' '{print $1}')
min=$(echo ${three} | awk -F':' '{print $2}')
if (( ${min} <= 14 )); then
 	hhmm="${year}:${hour}:(0[0-9]|1[0-4])"
 elif (( ${min} > 14 )) && (( ${min} <= 29 )); then
 	hhmm="${year}:${hour}:(1[5-9]|2[0-9])"
 elif (( ${min} > 29 )) && (( ${min} <= 44 )); then
 	hhmm="${year}:${hour}:(3[0-9]|4[0-4])"
 elif (( ${min} > 44 )) && (( ${min} <= 59 )); then
 	hhmm="${year}:${hour}:(4[5-9]|5[0-9])"
 fi
hlog="/var/log/apache2/${acct}.access.log"
ssh -tq ${uname}@${acct}.wpengine.com "sudo -v
echo -e \"\nAccount - ${acct}\"
echo -e \"\n\"${br}\"\nMost frequent requests: \n\"
while read line
do sudo awk '{print \$1,\$4\"]\",\$5,\$6,\$7,\$8}'
done < <(sudo grep -E \"${hhmm}\" ${hlog})| grep -oP '(?<=\\\").*(?=\\\")' | sort | uniq -c | sort -nk1 | tail -5
echo -e ${br}\"\nMost frequent IP's: \n\"
while read line
do sudo awk '{print \$1}' | sort | uniq -c | sort -nk1 | tail -5
done < <(sudo grep -E \"${hhmm}\" ${hlog})
exit"
echo -e ${br}
read -p "Check Another Account? \"account name\" or X - " a
if [[ ${a} = [a-zA-Z][a-zA-Z]* ]]; then
	acct=${a}
	slogchk
fi
}
#---------------------------------------------------------------------------------------------#


#################### Determine Environment ####################
function envir {
if [[ -n ${three} ]]; then
	if [[ ${three} = p* ]]; then
		envir=sites
	elif [[ ${three} = s* ]]; then
		envir=staging
	else
		read -p "Is this the Production or the Staging Server? " env
		echo
		if [[ ${env} = p* ]]; then
			envir=sites
		elif [[ ${env} = s* ]]; then
			envir=staging
		fi
	fi
elif [[ -z ${three} ]]; then
	read -p "Is this the Production or the Staging Server? " env
	echo
		if [[ ${env} = p* ]]; then
			envir=sites
		elif [[ ${env} = s* ]]; then
			envir=staging
		fi
fi
}
#################### USER NAME ####################

function setuname {
if [[ -z ${uname} ]]; then
	read -p "What is your SSH User Name? " name
	sed -ie "s/^uname=/uname=${name}/g" ${0}
else
	setname=$(awk '/^uname=/' ${0})
	echo -e "\nYou've already set a User Name silly.\n --> ${setname}\n"
fi
}
uname=

#################### Get Account ####################
function account {
if [[ -z ${acct} ]]; then
	read -p "What Account are we working with? " acct
	pod
fi
}

#################### Declare Pod ####################
function pod {
if [[ ${acct} = [0-9]* ]]; then
	pod="pod-${acct}"
elif [[ ${acct} = [pod-0-9]* ]]; then
	pod=${acct}
fi
}

#################### MENU ####################

function menu {
while [[ -z ${opt} ]]; do
	echo -e "${br}Available tasks:\n"
	grep -irn "^##\s" ${0} | awk '{$1=""; print}' | sort
	echo -e ${br}
	read -p "Type function name that you wish to use ( X to exit ): " opt
	echo
if [[ ${opt} = [xX] ]]; then
	exit 0
else
account
declare -F ${opt} &>/dev/null && echo && ${opt} && echo && exit 0 || echo -e "${opt}\nYou Didn't do it right! Try again.\n"; opt=""
fi
done
}

#################### RUN IT ####################

acct=${2}
three=${3}
four=${4}
br="++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
sshbr="++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\\n"
epoch=$(date +%s)
if [[ -z ${uname} ]]; then
	setuname
else
	if [[ -n ${1} ]]; then
		echo -e "\nYour current username is set to: \033[1;31m"${uname}"\033[1;000m"
		account
		declare -F ${1} &>/dev/null && echo && ${1} && echo && exit 0 || 
		echo -e "\n\033[1;31m"Looks like you entered the wrong function."\033[1;000m\n\nUsage is: l2 <function> <account> <optional argument>\n"
		acct=
		three=
		four=
		menu
	elif [[ ${1} = uname ]]; then
		setuname
	else
		echo -e "\nUsage is: l2 <function> <account> <optional argument>\n"
		acct=
		three=
		four=
		menu
	fi
fi
#---------------------------------------------------------------------------------------------#
