#!/bin/bash

#Author: BMO and ElCapitan
#Version: 1.3
# 1.3 -- Added the "utime" Function
# 1.2 -- Better Mac and "sed" compatibilty
# 1.2 -- Removed the need for sudo with local commands


#################### FUNCTIONS ####################
#---------------------------------------------------------------------------------------------#
#Description: Grab occurrences of all ${err} HTTP codes in an account's logs.
#Usage l2 www-codes <account> <error code>
function www-codes {
if [[ -z ${three} ]]; then
	echo -e "What HTTP Code would you like to search for?\n"
	read -r err
else
	err=${three}
fi
echo -e "\nDescription: Displays requests that had highest occurrences of the ${err} HTTP Status in ${acct}'s logs. Request counts are to the left of the requests below."
ssh -tq ${uname}@${acct}.wpengine.com "sudo cat /var/log/nginx/${acct}.access.log > /home/${uname}/${acct}.${epoch}.nginx && sudo cat /var/log/apache2/${acct}.access.log > /home/${uname}/${acct}.${epoch}.apache && exit ; bash"
scp -rq ${uname}@${acct}.wpengine.com:/home/${uname}/${acct}.${epoch}.nginx ${acct}.${epoch}.nginx && scp -rq ${uname}@${acct}.wpengine.com:/home/${uname}/${acct}.${epoch}.apache ${acct}.${epoch}.apache
for nglog in ${acct}.${epoch}.nginx
	do echo -e ${br}${nglog}"\n"
		awk -F\| -v code=${err} '{if ($5 ~ code) printf "IP: %s Code: %s Referrer: %s Request: %s\n",$3,$5,$7,$10}' ${nglog}| sort| uniq -c| sort -nk1| tail
	done
for apachelog in ${acct}.${epoch}.apache
	do echo -e ${br}${apachelog}"\n"
		awk -v code=${err} '{if ($9 ~ code) printf "IP: %s Code: %s Referrer: %s Request: %s %s %s\n",$1,$9,$11,$6,$7,$8}' ${apachelog}| sort| uniq -c| sort -nk1| tail
	done
echo -e ${br}
ssh -tq ${uname}@${acct}.wpengine.com "rm ${acct}.${epoch}.nginx ${acct}.${epoch}.apache && exit ; bash" && rm ${acct}.${epoch}.nginx ${acct}.${epoch}.apache
}
#---------------------------------------------------------------------------------------------#

#Description: Used to touch a file that is 404'ing in an account repeatedly.
#Usage l2 tfile <account> <file name>
function tfile { 
if [[ -z ${three} ]]; then
	echo -e "What File would you like to touch? (Absolute Path required)\n"
	read -r file
else
	file=${three}
fi
echo -e "\nDescription: Touches a file and sets proper permissions to mitigate 404 errors. Try using www-codes first to find 404 errors in an account."
ssh -tq ${uname}@${acct}.wpengine.com "cd /nas/wp/www/sites/${acct} && [[ -f ${file} ]] || touch ./${file} && sudo /nas/wp/admin fixperms ${acct} && exit ; bash"
}
#---------------------------------------------------------------------------------------------#

#Description: Output lines to migrate every account associated with another account, including parent and children.
#Usage l2 mig-all <account> <Destination Pod>
function mig-all {
if [[ -z ${three} ]]; then
		echo -e "What Pod are you moving to?\n"
		read -r dest-pod
else
	dest-pod=${three}
fi
echo -e "\nDescription: Output lines to migrate every account associated with another account, including parent and children."
ssh -tq ${uname}@${acct}.wpengine.com "sudo /nas/wp/ec2/cluster parent-child ${acct} > /home/${uname}/result.${epoch}.txt && hostname | cut -d- -f2 > /home/${uname}/host.${epoch}.txt && exit ; bash"
scp -q ${uname}@${acct}.wpengine.com:/home/${uname}/result.${epoch}.txt result.${epoch}.txt && scp -q ${uname}@${acct}.wpengine.com:/home/${uname}/host.${epoch}.txt host.${epoch}.txt
cur-pod=$(cat host.${epoch}.txt)
echo -e ${br}
echo -e $(cat result.txt | sed 's/ /\\n/g') | 
while read
do echo -e "sudo /nas/wp/ec2/cluster move-to-preferred-cluster ${cur-pod} ${REPLY} ${dest-pod}"
done
echo -e "\n${br}"
ssh -tq ${uname}@${acct}.wpengine.com "rm result.${epoch}.txt host.${epoch}.txt && exit ; bash" && rm result.${epoch}.txt host.${epoch}.txt
}
#---------------------------------------------------------------------------------------------#

#ng-logs - show log hits from nginx that took the longest time to complete.
# Usage L2 ng-logs <account>
function ng-logs { 
echo -e "\nDescription: Nginx log entries below are sorted by Page Load Time (8th | delimited column).\n"
ssh -tq ${uname}@${acct}.wpengine.com "sudo cat /var/log/nginx/${acct}.access.log > /home/${uname}/${acct}.${epoch}.nginx && exit ; bash"
scp -rq ${uname}@${acct}.wpengine.com:/home/${uname}/${acct}.${epoch}.nginx ${acct}.${epoch}.nginx
echo -e "\n${br}Slow requests that did NOT receive a 200 OK HTTP Status Code.\n"
awk '!/\|200\|/' ${acct}.${epoch}.nginx| sort -t\| -rnk8| head
echo -e "\n${br}Slow requests that received 200 OK HTTP Status Code.\n"
awk '/\|200\|/' ${acct}.${epoch}.nginx| sort -t\| -rnk8| head
echo -e "${br}"
ssh -tq ${uname}@${acct}.wpengine.com "rm ${acct}.${epoch}.nginx && exit ; bash" && rm ${acct}.${epoch}.nginx
}
#---------------------------------------------------------------------------------------------#

#sql-slow - show problematic sql infos.
#usage l2 sql-slow <account>
function sql-slow { 
echo -e "\nDescription: Display problematic MySQL information. (DO NOT PASTE THIS COMPLETE OUTPUT TO A CUSTOMER)\n"
echo -e "\n"${br}"Show MySQL users that hit the slow query log the most.\n"
ssh -tq ${uname}@${acct}.wpengine.com "sudo awk '/User@Host/ {print $3}' /var/log/mysql/mysql-slow.log| cut -d\[ -f1| sort| uniq -c| sort -nk1| tail -10 && exit ; bash"
echo -e ${br}"Count of which PHP lines that created slow queries: \n"
ssh -tq ${uname}@${acct}.wpengine.com "sudo grep -oP '(?<=\[\/nas\/wp\/www\/cluster\-).*(?=\])' /var/log/mysql/mysql-slow.log| sort| uniq -c| sort -nk1| tail -10 && exit ; bash"
echo -e ${br}"Heavy SQL Tables based on table size vs. table rows: \n"
ssh -tq ${uname}@${acct}.wpengine.com "sudo mysql -e \"select concat(table_schema, '.', table_name), concat(round(table_rows / 1000000, 2), 'M') rows, concat(round(data_length / ( 1024 * 1024 * 1024 ), 2), 'G') DATA, concat(round(index_length / ( 1024 * 1024 * 1024 ), 2), 'G') idx, concat(round(( data_length + index_length ) / ( 1024 * 1024 * 1024 ), 2), 'G') total_size, round(index_length / data_length, 2) idxfrac from information_schema.TABLES ORDER by data_length + index_length DESC limit 10;\" && exit ; bash"
echo -e ${br}
}
#---------------------------------------------------------------------------------------------#

#sql-heavy-rows - show which tables have over 5000 rows for an account.
#Usage l2 sql-heavey-rows <account>
function sql-heavy-rows {
echo -e "\n"${br}"Account: "${acct}"\nDatabase: wp_"${acct}"\n"${br}
ssh -tq ${uname}@${acct}.wpengine.com "cd /nas/wp/www/sites/${acct} && sudo mysql wp_${acct} -e 'show table status where rows > 5000;'| awk '{print \$1,\$5 }'| sort -nk2| column -t && exit ; bash"
echo -e ${br}
}
#---------------------------------------------------------------------------------------------#

# show load that was 1.5x the number of processer cores.
# Usage l2 hiload <account> <DD>
function hiload { 
if [[ -z ${three} ]]; then
	echo -e "Which Day? "
	read day
else
	day=${three}
fi
echo -e "\n\nDescription: Show times when load was over 1.5x the number of processor cores for this server."
echo -e ${br}
ssh -tq ${uname}@${acct}.wpengine.com "if [[ ! -f /var/log/sysstat/sa${day} ]]; then echo -e \"\nToo Far Back, try again\"; else sudo sar -q -f /var/log/sysstat/sa${day}| awk -vcpu=$(grep ^processor /proc/cpuinfo| wc -l) '{if (\$5 > (1.5 * cpu)) print}'; fi && exit ; bash"
echo -e "\n${br}"
}
#---------------------------------------------------------------------------------------------#

#wp-plugins - show enabled plugins for an account.
#Usage l2 wp-plugins <account>
function wp-plugins {
ssh -tq ${uname}@${acct}.wpengine.com "sudo -v && sudo grep \"table_prefix\" /nas/wp/www/sites/${acct}/wp-config.php > /home/${uname}/pf.${epoch}.txt && exit ; bash"
scp -q ${uname}@${acct}.wpengine.com:/home/${uname}/pf.${epoch}.txt pf.${epoch}.txt
pf=$(awk 'tolower($0) ~ /^\$table_prefix/ {gsub(/\"|;|'"'"'/,""); print $3}' pf.${epoch}.txt)
db=wp_${acct}
echo -e "\n"${br}"Enabled plugins for account "${acct}": \n"
ssh -tq ${uname}@${acct}.wpengine.com "sudo mysql ${db} -e \"select * from ${pf}options where option_name='active_plugins';\"| tr '\"' '\n'| awk -F\/ '/^[a-zA-Z]/ {print \$1}'| sed 1d && exit ; bash"
echo -e ${br}
ssh -tq ${uname}@${acct}.wpengine.com "rm pf.${epoch}.txt && exit ; bash" && rm pf.${epoch}.txt
}
#---------------------------------------------------------------------------------------------#

#Description: Shows how many min/hr had log hits. Ideally 60 for busy site meaning at least one hit per minute happened, and, thus, no downtime.
#Usage l2 uptime <account> <two-digit-day> <three-digit-month> (IE: l2 uptime bmoore 12 dec)
function uptime {
if [[ -z ${three} ]]; then 
	echo -e "Which Two Digit Day? (DD)"
	read day
	echo -e "Which Month? (Jan)"
	read mon
elif [[ ${three} != [0-9][0-9] ]]; then
	echo -e "\nLooks like you got it wrong!\nUsage - l2 uptime <account> <two-digit-day> <three-digit-month> (IE: l2 uptime ${acct} 12 dec)\nlets try again.\n"
	echo -e "Which Two Digit Day? (DD)"
	read day
	echo -e "Which Month? (Jan)"
	read mon
else
day=${three}
mon=${four}
fi
log="/var/log/apache2/${acct}.access.log"
ssh -tq ${uname}@${acct}.wpengine.com "sudo zgrep -Ei ${day}\"/\"${mon} ${log} | awk '{gsub(/\[|/,\"\"); print \$4}'| sed 's/:[0-9][0-9]$//g'| sort| uniq| sed 's/:[0-9][0-9]$//g'| uniq -c > /home/${uname}/${acct}.${epoch}.access.log
 	 sudo zgrep -Ei ${day}\"/\"${mon} ${log}.1 | awk '{gsub(/\[|/,\"\"); print \$4}'| sed 's/:[0-9][0-9]$//g'| sort| uniq| sed 's/:[0-9][0-9]$//g'| uniq -c >> /home/${uname}/${acct}.${epoch}.access.log
  	 sudo zgrep -Ei ${day}\"/\"${mon} ${log}.2.gz | awk '{gsub(/\[|/,\"\"); print \$4}'| sed 's/:[0-9][0-9]$//g'| sort| uniq| sed 's/:[0-9][0-9]$//g'| uniq -c >> /home/${uname}/${acct}.${epoch}.access.log
   	 sudo zgrep -Ei ${day}\"/\"${mon} ${log}.3.gz | awk '{gsub(/\[|/,\"\"); print \$4}'| sed 's/:[0-9][0-9]$//g'| sort| uniq| sed 's/:[0-9][0-9]$//g'| uniq -c >> /home/${uname}/${acct}.${epoch}.access.log
     sudo zgrep -Ei ${day}\"/\"${mon} ${log}.4.gz | awk '{gsub(/\[|/,\"\"); print \$4}'| sed 's/:[0-9][0-9]$//g'| sort| uniq| sed 's/:[0-9][0-9]$//g'| uniq -c >> /home/${uname}/${acct}.${epoch}.access.log
     sudo zgrep -Ei ${day}\"/\"${mon} ${log}.5.gz | awk '{gsub(/\[|/,\"\"); print \$4}'| sed 's/:[0-9][0-9]$//g'| sort| uniq| sed 's/:[0-9][0-9]$//g'| uniq -c >> /home/${uname}/${acct}.${epoch}.access.log
     exit ; bash"
scp -q ${uname}@${acct}.wpengine.com:/home/${uname}/${acct}.${epoch}.access.log ${acct}.${epoch}.access.log
echo -e "\nCurrent date is "$(date)"\n${br}"
cat ${acct}.${epoch}.access.log | while read line; do awk -vaccount=${acct} '{printf "Log hits on %s/60 possible minutes during the %s:00-59 time period for "account".\n",$1,$2}'
echo -e ${br}
done
ssh -tq ${uname}@${acct}.wpengine.com "rm ${acct}.${epoch}.access.log && exit ; bash" && rm ${acct}.${epoch}.access.log
}

#---------------------------------------------------------------------------------------------#

#################### USER NAME ####################

function setuname {
	if [[ -z ${uname} ]]; then
		echo -e "\nYou've not set a User Name!!\nWhat is your SSH User Name? "
		read -r name
			sed -ie "s/^uname=/uname=${name}/g" ${0}
	else
		setname=$(awk '/^uname=/' ${0})
		echo -e "\nYou've already set a User Name silly.\n --> ${setname}\n"
	fi
}
uname=

#################### Get Account ####################
function account {
if [[ -z ${acct} ]]; then
	echo -e "What Account are we working with?\n"
	read acct
	echo
fi
}

#################### MENU ####################

function menu {
while [[ -z ${opt} ]]; do
	account
	echo -e "${br}Available tasks:\n"
	echo -e "1: www-codes => Description: Grab occurrences of a certain HTTP code in an account's logs."
	echo -e "2: tfile => Description: Used to touch a file that is 404'ing in an account repeatedly."
	echo -e "3: mig-all => Description: Output lines to migrate every account associated with another account, including parent and children."
	echo -e "4: ng-logs => Description: Show log hits from nginx that took the longest time to complete."
	echo -e "5: sql-slow => Description: Show problematic sql information."
	echo -e "6: sql-heavy-rows => Description: Show which tables have over 5000 rows for an account."
	echo -e "7: hiload => Description: Show load that was 1.5x the number of processer cores."
	echo -e "8: wp-plugins => Description: Show enabled plugins for an account."
	echo -e "9: uptime => Description: Shows how many min/hr had log hits. Ideally 60 for busy site meaning at least one hit per minute happened, and, thus, no downtime."
	echo -e ${br}
	echo -e "Pick a Number, or Type out the Function\n"
	read -r opt
if [[ ${opt} = 1 ]] || [[ ${opt} = www-codes ]]; then
		www-codes
elif [[ ${opt} = 2 ]] || [[ ${opt} = tfile ]]; then
		tfile
elif [[ ${opt} = 3 ]] || [[ ${opt} = mig-all ]]; then
		mig-all
elif [[ ${opt} = 4 ]] || [[ ${opt} = ng-logs ]]; then
		ng-logs
elif [[ ${opt} = 5 ]] || [[ ${opt} = sql-slow ]]; then
		sql-slow
elif [[ ${opt} = 6 ]] || [[ ${opt} = sql-heavy-rows ]]; then
		sql-heavy-rows
elif [[ ${opt} = 7 ]] || [[ ${opt} = hiload ]]; then
		hiload
elif [[ ${opt} = 8 ]] || [[ ${opt} = wp-plugins ]]; then
		wp-plugins
elif [[ ${opt} = 9 ]] || [[ ${opt} = uptime ]]; then
		uptime
else
	echo -e "${opt}\nYou Didn't do it right! Try again.\n"
	opt=
fi
done
}

#################### RUN IT ####################

acct=${2}
three=${3}
four=${4}
br="++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
epoch=$(date +%s)
if [[ -z ${uname} ]]; then
	setuname
else
	account
	if [[ ${1} = www-codes ]]; then
		www-codes
	elif [[ ${1} = tfile ]]; then
		tfile
	elif [[ ${1} = mig-all ]]; then
		mig-all
	elif [[ ${1} = ng-logs ]]; then
		ng-logs
	elif [[ ${1} = sql-slow ]]; then
		sql-slow
	elif [[ ${1} = sql-heavy-rows ]]; then
		sql-heavy-rows
	elif [[ ${1} = hiload ]]; then
		hiload
	elif [[ ${1} = wp-plugins ]]; then
		wp-plugins
	elif [[ ${1} = uptime ]]; then
		uptime
	elif [[ ${1} = uname ]]; then
		setuname
	else
<<<<<<< HEAD
		echo -e "\nOh Noes!! You didn't select a Function and/or Account Name!\nUsage is: l2 <function> <account> <optional argument>\n"
		echo -e "Your current username is set to: ${uname}."
=======
		echo -e "\nUsage is: l2 <function> <account> <optional argument>\n"
>>>>>>> 223f344758f3e2a69402723ddc1ca67edd687e08
		menu
	fi
fi
#---------------------------------------------------------------------------------------------#
