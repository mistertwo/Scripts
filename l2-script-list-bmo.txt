www_codes - collect top hits for a certain HTTP status code.

www_codes() { [[ -z "$*" ]] && echo -e "\n\nDescription: Grab occurrences of a certain HTTP error code in an account's logs.\nUsage: cd /nas/wp/www/sites/<acct_name>; www_codes <HTTP code>\n\n" && return 0 || sudo -v; br="++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"; err=${1}; acct=$(basename $(pwd)); [[ -e ${acct} ]] && break || for nglog in /var/log/nginx/${acct}.access.log{,.1}; do echo -e ${br}${nglog}; sudo awk -F\| -v code=${err} '{if ($5 ~ code) printf "IP: %s Code: %s Referrer: %s Request: %s\n",$3,$5,$7,$10}' ${nglog}| sort| uniq -c| sort -nk1| tail; done; for apachelog in /var/log/apache2/${acct}.access.log{,.1}; do echo -e ${br}${apachelog}; sudo awk -v code=${err} '{if ($9 ~ code) printf "IP: %s Code: %s Referrer: %s Request: %s %s %s\n",$1,$9,$11,$6,$7,$8}' ${apachelog}| sort| uniq -c| sort -nk1| tail; done; echo -e ${br}; }; www_codes

favicon.ico - create a blank favicon.ico to get rid of 404 errors for that file.

[[ -f favicon.ico ]] && echo found || touch ./favicon.ico && sudo chown www-data. ./favicon.ico;

sql_queries - overdrive sql queries and queries to clear data.
sudo -v; cfg=wp-config.php; pf=$(awk 'tolower($0) ~ /^\$table_prefix/ {gsub(/\"|;|'"'"'/,""); print $3}' ./${cfg}); db=$(awk -F\' '/^define.*DB_NAME/ {print $4}' ${cfg}); echo -e "\nConfig: "${cfg}"\nTable Prefix: "${pf}"\nDatabase: "${db}"\n\n"; echo -e "Spam Posts: "$(sudo mysql ${db} -e "SELECT COUNT(*) as row_count FROM "${pf}"comments WHERE comment_approved = 'spam' \G;"| awk '{if ($1 ~ /[a-zA-Z]/) print $2}')| grep -vE \ 0$; echo -e "Trashed Posts: "$(sudo mysql ${db} -e "SELECT COUNT(*) as row_count FROM "${pf}"posts WHERE post_type = 'trash' \G;"| awk '{if ($1 ~ /[a-zA-Z]/) print $2}')| grep -vE \ 0$; echo -e "Trashed Comments: "$(sudo mysql ${db} -e "SELECT COUNT(*) as row_count FROM "${pf}"comments WHERE comment_approved = 'trash' \G;"| awk '{if ($1 ~ /[a-zA-Z]/) print $2}')| grep -vE \ 0$; echo -e "Orphaned Postmeta: "$(sudo mysql ${db} -e "SELECT COUNT(pm.meta_id) as row_count FROM "${pf}"postmeta pm LEFT JOIN "${pf}"posts wp ON wp.ID = pm.post_id WHERE wp.ID IS NULL \G;"| awk '{if ($1 ~ /[a-zA-Z]/) print $2}')"\nsudo mysql "${db}" -e \"delete pm from "${pf}"postmeta pm left join "${pf}"posts wp on wp.ID = pm.post_id where wp.ID is NULL;\""| grep -vE \ 0$; echo -e "Orphaned Commentmeta: "$(sudo mysql ${db} -e "SELECT COUNT(*) as row_count FROM "${pf}"commentmeta WHERE comment_id NOT IN (SELECT comment_id FROM "${pf}"comments) \G;"| awk '{if ($1 ~ /[a-zA-Z]/) print $2}')| grep -vE \ 0$; echo -e "Transients 1: "$(sudo mysql ${db} -e "SELECT COUNT(*) as row_count FROM "${pf}"options WHERE option_name LIKE ('_transient_%') \G;"| awk '{if ($1 ~ /[a-zA-Z]/) print $2}')| grep -vE \ 0$; echo -e "Transients 2: "$(sudo mysql ${db} -e "SELECT COUNT(*) as row_count FROM "${pf}"options WHERE option_name LIKE ('_site_transient_%') \G;"| awk '{if ($1 ~ /[a-zA-Z]/) print $2}')| grep -vE \ 0$; echo -e "Orphaned Term Relationships: "$(sudo mysql ${db} -e "SELECT COUNT(tr.object_id) as row_count FROM "${pf}"term_relationships tr INNER JOIN "${pf}"term_taxonomy tt ON (tr.term_taxonomy_id = tt.term_taxonomy_id) WHERE tt.taxonomy != 'link_category' AND tr.object_id NOT IN (SELECT ID FROM "${pf}"posts) \G;"| awk '{if ($1 ~ /[a-zA-Z]/) print $2}')| grep -vE \ 0$; echo -e "Limit_login_lockouts: "$(sudo mysql ${db} -e "SELECT option_value as row_count FROM "${pf}"options WHERE option_name = 'limit_login_lockouts' \G;"| awk '{if ($1 ~ /[a-zA-Z]/) print $2}'| cut -d: -f2| grep -vE \ 0$)"\nsudo mysql ${db} -e \"update ${pf}options set option_value='' where option_name = 'limit_login_lockouts';\""| grep -vE \ 0$; echo;

migrate_all - output lines to migrate parents and children for an account.
mig_all() { [[ -z "$*" ]] && echo -e "\n\nDescription: Output lines to migrate every account associated with another account, including parent and children.\nUsage: mig_all <acct_name> <destination cluster ID>\n\n" && return 0 || sudo -v; acct=${1}; dest_pod=${2}; cur_pod=$(hostname| cut -d- -f2); echo -e $(sudo /nas/wp/ec2/cluster parent-child ${acct}| sed 's/ /\\n/g')| while read; do echo -e "sudo /nas/wp/ec2/cluster move-to-preferred-cluster ${cur_pod} ${REPLY} ${dest_pod}"; done; }; mig_all

sar_hiload - show load that was 1.5x the number of processer cores.
hiload() { [[ -z "$*" ]] && echo -e "\n\nDescription: Show times when load was over 1.5x the number of processor cores for this server.\nUsage: hiload <two_digit_day>\n\n" && return 0 || day=${1}; echo -e "\n"${br}"\nWhere I am: "${HOSTNAME}" - "${PWD}"\n"; sar -q -f /var/log/sysstat/sa${day}| awk -vcpu=$(grep ^processor /proc/cpuinfo| wc -l) '{if ($5 > (1.5 * cpu)) print}'; echo -e ${br}"\n"; }; hiload

ng_logs - show log hits from nginx that took the longest time to complete.
ng_logs() { acct=$(basename ${PWD}) && log=/var/log/nginx/${acct}.access.log && [[ ! -f ${log} ]] && echo -e "\n\nDescription: Show heavy requests from Nginx access logs.\nUsage: cd /nas/wp/www/sites/<acct_name>; ng_logs;\n\n" && return 0 || sudo -v; echo -e "\nLog lines below are sorted by Page Load Time (8th | delimited column).\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nSlow requests that did NOT receive a 200 OK HTTP Status Code.\n"; sudo awk '!/\|200\|/' /var/log/nginx/${acct}.access.log| sort -t\| -nk8| tail && echo -e "\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nSlow requests that received 200 OK HTTP Status Code.\n"; sudo awk '/\|200\|/' /var/log/nginx/${acct}.access.log| sort -t\| -nk8| tail; echo -e "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"; }; ng_logs

sql_slow - show problematic sql infos.
sql_slow() { sudo -v; br="++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"; echo -e "\n"${br}"\nSlow users and their log hit counts: \n"; sudo awk '/User@Host/ {print $3}' /var/log/mysql/mysql-slow.log| cut -d\[ -f1| sort| uniq -c| sort -nk1| tail -10; echo -e ${br}"\n PHP line number log hits: \n"; sudo grep -oP '(?<=\[\/nas\/wp\/www\/cluster\-).*(?=\])' /var/log/mysql/mysql-slow.log| sort| uniq -c| sort -nk1| tail -10; echo -e ${br}"\nHeavy SQL Tables based on table size vs. table rows: \n"; sudo mysql -e "select concat(table_schema, '.', table_name), concat(round(table_rows / 1000000, 2), 'M') rows, concat(round(data_length / ( 1024 * 1024 * 1024 ), 2), 'G') DATA, concat(round(index_length / ( 1024 * 1024 * 1024 ), 2), 'G') idx, concat(round(( data_length + index_length ) / ( 1024 * 1024 * 1024 ), 2), 'G') total_size, round(index_length / data_length, 2) idxfrac from information_schema.TABLES ORDER by data_length + index_length DESC limit 10;"; echo -e ${br}; }; sql_slow

sql_heavy_rows - show which tables have over 5000 rows for an account.
sql_heavy_rows() { br="++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"; db=$(awk -F\' '/^define.*DB_NAME/ {print $4}' wp-config.php); [[ -z "${db}" ]] && echo -e "\n\nDescription: Show tables with more than 5000 rows.\nUsage: cd /nas/wp/www/sites/<acct_name>; sql_heavy_rows\n\n" && return 0 || acct=$(basename $(pwd)); echo -e "\n"${br}"\nAccount: "${acct}"\nDatabase: "${db}"\n"${br}; sudo mysql ${db} -e 'show table status where rows > 5000;'| awk '{print $1,$5 }'| sort -nk2| column -t; echo -e ${br}"\n"; }; sql_heavy_rows

wp_plugins - show enabled plugins for an account.
wp_plugins() { acct=$(basename ${PWD}) && cfg=/nas/wp/www/sites/${acct}/wp-config.php && [[ ! -f ${cfg} ]] && echo -e "\n\nDescription: Show enabled WP plugins for an account.\nUsage: cd /nas/wp/www/sites/<acct_name>; wp_plugins;\n\n" && return 0 || sudo -v; br="++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"; pf=$(awk 'tolower($0) ~ /^\$table_prefix/ {gsub(/\"|;|'"'"'/,""); print $3}' ${cfg}); db=$(awk -F\' '/^define.*DB_NAME/ {print $4}' ${cfg}); echo -e "\n"${br}"\nEnabled plugins for account "${acct}": \n"; sudo mysql ${db} -e "select * from ${pf}options where option_name='active_plugins';"| tr '\"' '\n'| awk -F\/ '/^[a-zA-Z]/ {print $1}'| sed 1d; echo -e ${br}"\n"; }; wp_plugins

logstalgia - show log visualization.  requires that you install logstalgia on your machine locally and runs from your machine locally.
lstalgia() { pod=$1; user=$2; ssh jmorgan_@pod-${pod}.wpengine.com sudo tail -f /var/log/nginx/${user}.apachestyle.log| logstalgia --sync; }; lstalgia

inodes - count inode break down for folders.
inodes() { find -maxdepth 1 -type d |while read dir ; do echo -en "$dir :::: " ; find "$dir" |wc -l; done|sed 's/^.\///'|sort -t: -rnk5|head -n10|column -ts::::; }; inodes

